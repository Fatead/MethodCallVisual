/*
 Navicat Premium Data Transfer

 Source Server         : MySQL
 Source Server Type    : MySQL
 Source Server Version : 50728
 Source Host           : localhost:3306
 Source Schema         : extractmodel

 Target Server Type    : MySQL
 Target Server Version : 50728
 File Encoding         : 65001

 Date: 05/12/2019 16:05:25
*/

SET NAMES utf8mb4;
SET FOREIGN_KEY_CHECKS = 0;

-- ----------------------------
-- Table structure for classinfo
-- ----------------------------
DROP TABLE IF EXISTS `classinfo`;
CREATE TABLE `classinfo`  (
  `projectname` text CHARACTER SET utf8 COLLATE utf8_general_ci NULL,
  `classname` text CHARACTER SET utf8 COLLATE utf8_general_ci NULL,
  `isInterface` text CHARACTER SET utf8 COLLATE utf8_general_ci NULL,
  `superclass` text CHARACTER SET utf8 COLLATE utf8_general_ci NULL,
  `interfaces` text CHARACTER SET utf8 COLLATE utf8_general_ci NULL,
  `modi` text CHARACTER SET utf8 COLLATE utf8_general_ci NULL,
  `loc` int(11) NULL DEFAULT NULL,
  `filename` text CHARACTER SET utf8 COLLATE utf8_general_ci NULL,
  `content` longtext CHARACTER SET utf8 COLLATE utf8_general_ci NULL
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of classinfo
-- ----------------------------
INSERT INTO `classinfo` VALUES ('MyLuence-master', 'com.wind.myLuence.config.CfFileParser', '0', '', ' ', 'public;abstract;', 25, 'C:\\Users\\Zero\\Desktop\\??\\MyLuence-master\\MyLuence-master\\src\\main\\java\\com\\wind\\myLuence\\config\\CfFileParser.java', '/** \n * ??????\n * @author zhouyanjun\n * @version 1.0 2014-8-23\n */\npublic abstract class cffileparser {\n  /** \n * ???\n */\n  public enum configitem;\n{\n  }\n  public string value;\n  private void configitem(  string value){\n    this.value=value;\n  }\n  private string filepath;\n  public abstract map<string,context> parse() throws ioexception ;\n  public string getfilepath(){\n    return filepath;\n  }\n  public void setfilepath(  string filepath){\n    this.filepath=filepath;\n  }\n}\n');
INSERT INTO `classinfo` VALUES ('MyLuence-master', 'com.wind.myLuence.config.PropertiesCfParser', '0', 'com.wind.myLuence.config.CfFileParser', ' ', 'public;', 33, 'C:\\Users\\Zero\\Desktop\\??\\MyLuence-master\\MyLuence-master\\src\\main\\java\\com\\wind\\myLuence\\config\\PropertiesCfParser.java', '/** \n * ?????????\n * @author zhouyanjun\n * @version 1.0 2015-1-13\n */\npublic class propertiescfparser extends cffileparser {\n  @override public map<string,context> parse() throws ioexception {\n    properties prop=new properties();\n    prop.load(propertyparser.class.getresourceasstream(this.getfilepath()));\n    map<string,string> configs=new hashmap<string,string>();\n    enumeration<?> keys=prop.keys();\n    list<string> cfitemarray=new arraylist<string>();\n    while (keys.hasmoreelements()) {\n      string key=(string)keys.nextelement();\n      if (key.contains(configitem.beanclass.value)) {\n        cfitemarray.add(key.split(\"\\\\.\")[0]);\n      }\n      string value=(string)prop.get(key);\n      configs.put(key,value);\n    }\n    map<string,context> results=new hashmap<string,context>();\n    for (    string cfitem : cfitemarray) {\n      context context=new context();\n      for (      string key : configs.keyset()) {\n        if (key.contains(cfitem)) {\n          context.put(key.split(\"\\\\.\")[1],configs.get(key));\n        }\n      }\n      results.put(cfitem,context);\n    }\n    return results;\n  }\n}\n');
INSERT INTO `classinfo` VALUES ('MyLuence-master', 'com.wind.myLuence.config.XmlCfParser', '0', 'com.wind.myLuence.config.CfFileParser', ' ', 'public;', 10, 'C:\\Users\\Zero\\Desktop\\??\\MyLuence-master\\MyLuence-master\\src\\main\\java\\com\\wind\\myLuence\\config\\XmlCfParser.java', '/** \n * xml???????\n * @author zhouyanjun\n * @version 1.0 2015-1-13\n */\npublic class xmlcfparser extends cffileparser {\n  @override public map<string,context> parse(){\n    return null;\n  }\n}\n');
INSERT INTO `classinfo` VALUES ('MyLuence-master', 'com.wind.myLuence.Configurable', '1', '', ' ', 'public;', 8, 'C:\\Users\\Zero\\Desktop\\??\\MyLuence-master\\MyLuence-master\\src\\main\\java\\com\\wind\\myLuence\\Configurable.java', '/** \n * ???\n * @author zhouyanjun\n * @version 1.0 2014-1-2\n */\npublic interface configurable {\n  public void configure(  context context) throws configurableexception, classnotfoundexception ;\n}\n');
INSERT INTO `classinfo` VALUES ('MyLuence-master', 'com.wind.myLuence.Context', '0', '', ' ', 'public;', 68, 'C:\\Users\\Zero\\Desktop\\??\\MyLuence-master\\MyLuence-master\\src\\main\\java\\com\\wind\\myLuence\\Context.java', 'public class context {\n  private map<string,string> parameters;\n  public context(){\n    parameters=collections.synchronizedmap(new hashmap<string,string>());\n  }\n  public context(  map<string,string> paramters){\n    this();\n    this.putall(paramters);\n  }\n  public void clear(){\n    parameters.clear();\n  }\n  public void putall(  map<string,string> map){\n    parameters.putall(map);\n  }\n  public void put(  string key,  string value){\n    parameters.put(key,value);\n  }\n  public boolean getboolean(  string key,  boolean defaultvalue){\n    string value=get(key);\n    if (value != null) {\n      return boolean.parseboolean(value.trim());\n    }\n    return defaultvalue;\n  }\n  public boolean getboolean(  string key){\n    return getboolean(key,null);\n  }\n  public integer getinteger(  string key,  integer defaultvalue){\n    string value=get(key);\n    if (value != null) {\n      return integer.parseint(value.trim());\n    }\n    return defaultvalue;\n  }\n  private string get(  string key,  string defaultvalue){\n    string result=parameters.get(key);\n    if (result != null) {\n      return result;\n    }\n    return defaultvalue;\n  }\n  public integer getinteger(  string key){\n    return getinteger(key,null);\n  }\n  public long getlong(  string key,  long defaultvalue){\n    string value=get(key);\n    if (value != null) {\n      return long.parselong(value.trim());\n    }\n    return defaultvalue;\n  }\n  public long getlong(  string key){\n    return getlong(key,null);\n  }\n  public string getstring(  string key){\n    return get(key);\n  }\n  public string getstring(  string key,  string defaultvalue){\n    return get(key,defaultvalue);\n  }\n  private string get(  string key){\n    return get(key,null);\n  }\n  public string tostring(){\n    return \"{ parameters:\" + parameters + \" }\";\n  }\n}\n');
INSERT INTO `classinfo` VALUES ('MyLuence-master', 'com.wind.myLuence.DataSource', '1', '', 'Configurable; ', 'public;', 18, 'C:\\Users\\Zero\\Desktop\\??\\MyLuence-master\\MyLuence-master\\src\\main\\java\\com\\wind\\myLuence\\DataSource.java', '/** \n * ???\n * <p>\n * ??????????\n * </p>\n * @author zhouyanjun\n * @version 1.0 2014-4-24\n */\npublic interface datasource extends configurable {\n  /** \n * ??????\n */\n  public void initialdataopen();\n  /** \n * ??????\n */\n  public void increasedataopen();\n}\n');
INSERT INTO `classinfo` VALUES ('MyLuence-master', 'com.wind.myLuence.exception.ConfigurableException', '0', 'Exception', ' ', 'public;', 16, 'C:\\Users\\Zero\\Desktop\\??\\MyLuence-master\\MyLuence-master\\src\\main\\java\\com\\wind\\myLuence\\exception\\ConfigurableException.java', '/** \n * ????\n * @author zhouyanjun\n * @version 1.0 2015-1-13\n */\npublic class configurableexception extends exception {\n  private static final long serialversionuid=7750826735020761837l;\n  public configurableexception(){\n  }\n  public configurableexception(  string message){\n    super(message);\n  }\n  public configurableexception(  string message,  throwable cause){\n    super(message,cause);\n  }\n}\n');
INSERT INTO `classinfo` VALUES ('MyLuence-master', 'com.wind.myLuence.exception.IndexException', '0', 'Exception', ' ', 'public;', 16, 'C:\\Users\\Zero\\Desktop\\??\\MyLuence-master\\MyLuence-master\\src\\main\\java\\com\\wind\\myLuence\\exception\\IndexException.java', '/** \n * ????\n * @author zhouyanjun\n * @version 1.0 2015-1-13\n */\npublic class indexexception extends exception {\n  private static final long serialversionuid=-2049475935211044964l;\n  public indexexception(){\n  }\n  public indexexception(  string message){\n    super(message);\n  }\n  public indexexception(  string message,  throwable cause){\n    super(message,cause);\n  }\n}\n');
INSERT INTO `classinfo` VALUES ('MyLuence-master', 'com.wind.myLuence.exception.SearchException', '0', 'Exception', ' ', 'public;', 16, 'C:\\Users\\Zero\\Desktop\\??\\MyLuence-master\\MyLuence-master\\src\\main\\java\\com\\wind\\myLuence\\exception\\SearchException.java', '/** \n * ????\n * @author zhouyanjun\n * @version 1.0 2015-1-13\n */\npublic class searchexception extends exception {\n  private static final long serialversionuid=-2940773275100427250l;\n  public searchexception(){\n  }\n  public searchexception(  string message){\n    super(message);\n  }\n  public searchexception(  string message,  throwable cause){\n    super(message,cause);\n  }\n}\n');
INSERT INTO `classinfo` VALUES ('MyLuence-master', 'com.wind.myLuence.factory.MyLuenceFactory', '1', '', ' ', 'public;', 6, 'C:\\Users\\Zero\\Desktop\\??\\MyLuence-master\\MyLuence-master\\src\\main\\java\\com\\wind\\myLuence\\factory\\MyLuenceFactory.java', 'public interface myluencefactory {\n  public static string index_source_name=\"myluence_index_source\";\n  public static string searcher_name=\"myluence_searcher\";\n  public indexsource getixsourceinstance(  string name);\n  public abstarctsearcher getsearcherinstance();\n}\n');
INSERT INTO `classinfo` VALUES ('MyLuence-master', 'com.wind.myLuence.factory.XmlMyLuenceFactory', '0', '', 'MyLuenceFactory; ', 'public;', 15, 'C:\\Users\\Zero\\Desktop\\??\\MyLuence-master\\MyLuence-master\\src\\main\\java\\com\\wind\\myLuence\\factory\\XmlMyLuenceFactory.java', 'public class xmlmyluencefactory implements myluencefactory {\n  private beanfactory beanfactory;\n  public xmlmyluencefactory(  string[] xmls){\n    beanfactory=new classpathxmlapplicationcontext(xmls);\n  }\n  @override public indexsource getixsourceinstance(  string name){\n    if (name != null && !name.isempty()) {\n      return (indexsource)beanfactory.getbean(name);\n    }\n    return (indexsource)beanfactory.getbean(index_source_name);\n  }\n  @override public abstarctsearcher getsearcherinstance(){\n    return (abstarctsearcher)beanfactory.getbean(searcher_name);\n  }\n}\n');
INSERT INTO `classinfo` VALUES ('MyLuence-master', 'com.wind.myLuence.index.AbstractIndex', '0', '', 'Index; ', 'public;abstract;', 10, 'C:\\Users\\Zero\\Desktop\\??\\MyLuence-master\\MyLuence-master\\src\\main\\java\\com\\wind\\myLuence\\index\\AbstractIndex.java', 'public abstract class abstractindex implements index {\n  protected analyzer analyzer;\n  protected directory directory;\n  public analyzer getanalyzer(){\n    return analyzer;\n  }\n  public void setanalyzer(  analyzer analyzer){\n    this.analyzer=analyzer;\n  }\n}\n');
INSERT INTO `classinfo` VALUES ('MyLuence-master', 'com.wind.myLuence.index.BeanIndex', '0', 'com.wind.myLuence.index.AbstractIndex', ' ', 'public;', 374, 'C:\\Users\\Zero\\Desktop\\??\\MyLuence-master\\MyLuence-master\\src\\main\\java\\com\\wind\\myLuence\\index\\BeanIndex.java', '/** \n * bean????\n * @author zhouyanjun\n * @version 1.0 2014-4-24\n */\npublic class beanindex extends abstractindex {\n  private final logger logger=loggerfactory.getlogger(this.getclass());\n  private static final string analyzedindexfields=\"analyzedindexfields\";\n  private static final string notanalyzedindexfields=\"notanalyzedindexfields\";\n  private static final string storefields=\"storefields\";\n  private static final string indexfilepath=\"indexfilepath\";\n  private static final string classname=\"beanclass\";\n  private static final string analyzerclass=\"analyzerclass\";\n  private static final string pkname=\"pkname\";\n  private static final string pkname_default=\"id\";\n  private static final string pk_field=\"pkfields\";\n  private static final string datafieldname=\"datafieldname\";\n  private static final string datafieldname_default=\"data\";\n  private list<string> analyzedindexfields;\n  private list<string> notanalyzedindexfields;\n  private list<string> storefields;\n  private class<?> clazz;\n  private list<string> pkfields;\n  private string pkname;\n  private string datafieldname;\n  private map<string,fieldlucproperty> fieldpropertymap;\n  public void configure(  context context) throws configurableexception {\n    try {\n      string analyzerclass=context.getstring(analyzerclass);\n      this.analyzer=(analyzer)class.forname(analyzerclass).newinstance();\n      list<string> pojofields=new arraylist<string>();\n      string classname=context.getstring(classname);\n      try {\n        this.clazz=class.forname(classname);\n        getpojofileds(pojofields,clazz);\n      }\n catch (      classnotfoundexception e1) {\n        logger.error(\"bean class error to create.\");\n        throw new configurableexception(e1.getmessage(),e1);\n      }\n      string analyzedindexfields=context.getstring(analyzedindexfields);\n      if (analyzedindexfields != null && !analyzedindexfields.isempty()) {\n        this.analyzedindexfields=new arraylist<string>(arrays.aslist(analyzedindexfields.split(\",\")));\n        if (!pojofields.containsall(this.analyzedindexfields)) {\n          logger.error(\"indexfield\'s range beyong the range of pojofields\");\n          throw new configurableexception(\"indexfield\'s range beyong the range of pojofields\");\n        }\n      }\n      string notanalyzedindexfields=context.getstring(notanalyzedindexfields);\n      if (notanalyzedindexfields != null && !notanalyzedindexfields.isempty()) {\n        this.notanalyzedindexfields=new arraylist<string>(arrays.aslist(notanalyzedindexfields.split(\",\")));\n        if (!pojofields.containsall(this.notanalyzedindexfields)) {\n          logger.error(\"notanalyzedindexfields\'s range beyong the range of pojofields\");\n          throw new configurableexception(\"notanalyzedindexfields\'s range beyong the range of pojofields\");\n        }\n      }\n      string storefields=context.getstring(storefields);\n      if (storefields != null && !storefields.isempty()) {\n        this.storefields=new arraylist<string>(arrays.aslist(storefields.split(\",\")));\n        if (!pojofields.containsall(this.storefields) && !this.storefields.contains(datafieldname_default)) {\n          logger.error(\"storefields\'s range beyong the range of pojofields\");\n          throw new configurableexception(\"storefields\'s range beyong the range of pojofields\");\n        }\n      }\n      if (analyzedindexfields == null && notanalyzedindexfields == null && storefields == null) {\n        logger.error(\"you must set one of analyzedindexfields,notanalyzedindexfields,storefields at least.\");\n        throw new configurableexception(\"you must set one of analyzedindexfields,notanalyzedindexfields,storefields at least.\");\n      }\n      string pkfields=context.getstring(pk_field);\n      if (pkfields != null && !pkfields.isempty()) {\n        this.pkfields=new arraylist<string>(arrays.aslist(pkfields.split(\",\")));\n      }\n      string indexfilepath=context.getstring(indexfilepath);\n      if (indexfilepath == null || indexfilepath.isempty()) {\n        logger.error(\"indexfilepath must to be set.\");\n        throw new configurableexception(\"indexfilepath must to be set.\");\n      }\n      try {\n        this.directory=fsdirectory.open(new file(indexfilepath));\n      }\n catch (      ioexception e) {\n        logger.error(\"index file dir error to create.\");\n        throw new configurableexception(\"index file dir error to create.\");\n      }\n      this.pkname=context.getstring(pkname,pkname_default);\n      this.datafieldname=context.getstring(datafieldname,datafieldname_default);\n      fieldpropertymap=getfieldlucproperty();\n    }\n catch (    instantiationexception e2) {\n      log.error(this.getclass(),e2.getmessage());\n      throw new configurableexception(e2.getmessage(),e2);\n    }\ncatch (    illegalaccessexception e2) {\n      log.error(this.getclass(),e2.getmessage());\n      throw new configurableexception(e2.getmessage(),e2);\n    }\ncatch (    classnotfoundexception e2) {\n      log.error(this.getclass(),e2.getmessage());\n      throw new configurableexception(e2.getmessage(),e2);\n    }\n  }\n  public void write(  list<object> datas) throws indexexception {\n    log.info(beanindex.class,\"#################### createindex  starting\");\n    long start=system.currenttimemillis();\n    if (datas == null || datas.isempty())     return;\n    indexwriter indexwriter=null;\n    try {\n      while (!indexwriter.islocked(directory)) {\n        indexwriterconfig indexwriterconfig=new indexwriterconfig(version.lucene_8,analyzer);\n        indexwriter=new indexwriter(directory,indexwriterconfig);\n        indexwriter.deleteall();\n        indexwriter.forcemergedeletes();\n        indexwriter.commit();\n        for (        object data : datas) {\n          if (data == null)           continue;\n          document doc=new document();\n          if (this.pkfields != null) {\n            list<string> pkfieldvaluelist=new arraylist<string>();\n            for (            string pkfield : pkfields) {\n              pkfieldvaluelist.add(getfieldvalue(clazz,pkfield,data));\n            }\n            stringbuilder id=new stringbuilder();\n            for (            string pkfieldvalue : pkfieldvaluelist) {\n              id.append(pkfieldvalue + \"@\");\n            }\n            fieldtype fieldtype=new fieldtype();\n            fieldtype.setstored(true);\n            fieldtype.setindexed(false);\n            fieldtype.settokenized(false);\n            doc.add(new field(pkname,id.substring(0,id.length() - 1),fieldtype));\n          }\n          for (          string fieldname : fieldpropertymap.keyset()) {\n            string value=null;\n            if (fieldname.equalsignorecase(datafieldname)) {\n              value=jsonobject.fromobject(data,config).tostring();\n            }\n else {\n              value=getfieldvalue(clazz,fieldname,data);\n            }\n            if (value != null) {\n              fieldtype fieldtype=new fieldtype();\n              fieldlucproperty fieldlucproperty=fieldpropertymap.get(fieldname);\n              fieldtype.setstored(fieldlucproperty.isstore());\n              fieldtype.setindexed(fieldlucproperty.isindex());\n              fieldtype.settokenized(fieldlucproperty.isanalyzed());\n              field field=new field(fieldname,value,fieldtype);\n              doc.add(field);\n            }\n          }\n          indexwriter.adddocument(doc);\n        }\n        indexwriter.commit();\n        break;\n      }\n    }\n catch (    exception e) {\n      log.error(beanindex.class,e,\"###############create index happened error\" + e.getmessage());\n    }\n finally {\n      if (indexwriter != null) {\n        try {\n          indexwriter.close();\n          indexwriter.unlock(directory);\n        }\n catch (        ioexception e) {\n          log.error(this.getclass(),e);\n        }\n        indexwriter=null;\n      }\n    }\n    log.warn(beanindex.class,\"#################### createindex  finished, this process spent \" + (system.currenttimemillis() - start) / 1000 + \" seconds\");\n  }\n  @override public void append(  list<object> datas) throws indexexception {\n    log.info(beanindex.class,\"#################### append index  starting\");\n    if (datas == null || datas.isempty())     return;\n    long start=system.currenttimemillis();\n    indexwriter indexwriter=null;\n    try {\n      while (!indexwriter.islocked(directory)) {\n        indexwriterconfig indexwriterconfig=new indexwriterconfig(version.lucene_46,analyzer);\n        indexwriter=new indexwriter(directory,indexwriterconfig);\n        for (        object data : datas) {\n          if (data == null)           continue;\n          document doc=new document();\n          if (this.pkfields != null) {\n            list<string> pkfieldvaluelist=new arraylist<string>();\n            for (            string pkfield : pkfields) {\n              pkfieldvaluelist.add(getfieldvalue(clazz,pkfield,data));\n            }\n            stringbuilder id=new stringbuilder();\n            for (            string pkfieldvalue : pkfieldvaluelist) {\n              id.append(pkfieldvalue + \"@\");\n            }\n            fieldtype fieldtype=new fieldtype();\n            fieldtype.setstored(true);\n            fieldtype.setindexed(false);\n            fieldtype.settokenized(false);\n            doc.add(new field(pkname,id.substring(0,id.length() - 1),fieldtype));\n          }\n          for (          string fieldname : fieldpropertymap.keyset()) {\n            string value=null;\n            if (fieldname.equalsignorecase(datafieldname)) {\n              value=jsonobject.fromobject(data,config).tostring();\n            }\n else {\n              value=getfieldvalue(clazz,fieldname,data);\n            }\n            if (value != null) {\n              fieldtype fieldtype=new fieldtype();\n              fieldlucproperty fieldlucproperty=fieldpropertymap.get(fieldname);\n              fieldtype.setstored(fieldlucproperty.isstore());\n              fieldtype.setindexed(fieldlucproperty.isindex());\n              fieldtype.settokenized(fieldlucproperty.isanalyzed());\n              field field=new field(fieldname,value,fieldtype);\n              doc.add(field);\n            }\n          }\n          indexwriter.adddocument(doc);\n        }\n        indexwriter.forcemerge(50);\n        indexwriter.commit();\n        break;\n      }\n    }\n catch (    exception e) {\n      log.error(beanindex.class,e,\"###############append index happened error\" + e.getmessage());\n    }\n finally {\n      if (indexwriter != null) {\n        try {\n          indexwriter.close();\n          indexwriter.unlock(directory);\n        }\n catch (        ioexception e) {\n          log.error(this.getclass(),e);\n        }\n        indexwriter=null;\n      }\n    }\n    log.warn(beanindex.class,\"#################### append index  finished, this process spent \" + (system.currenttimemillis() - start) / 1000 + \" seconds\");\n  }\n  @override public void remove() throws indexexception {\n  }\n  /** \n * ?????\n * @param clazzclass????\n * @param fieldname????\n * @param data????\n * @return ??????\n * @throws exception\n */\n  private string getfieldvalue(  class<?> clazz,  string fieldname,  object data) throws exception {\n    string value=null;\n    method m=clazz.getmethod(\"get\" + fieldname.substring(0,1).touppercase() + fieldname.substring(1));\n    string returnvaluetype=m.getreturntype().getsimplename();\n    object mvalue=m.invoke(data);\n    if (mvalue != null) {\n      if (\"string\".equals(returnvaluetype) || \"integer\".equals(returnvaluetype) || \"long\".equals(returnvaluetype)|| \"double\".equals(returnvaluetype)|| \"float\".equals(returnvaluetype)|| \"boolean\".equals(returnvaluetype)|| \"short\".equalsignorecase(returnvaluetype)) {\n        value=mvalue.tostring();\n      }\n else       if (\"date\".equals(returnvaluetype)) {\n        value=dateutil.timeformat((date)mvalue);\n      }\n else       if (\"timestamp\".equals(returnvaluetype)) {\n        value=dateutil.timeformat((timestamp)mvalue);\n      }\n else       if (\"hashmap\".equals(returnvaluetype)) {\n        value=jsonobject.fromobject(mvalue,config).tostring();\n      }\n else       if (\"arraylist\".equals(returnvaluetype)) {\n        value=jsonarray.fromobject(mvalue,config).tostring();\n      }\n else {\n        value=getfieldvalue(m.getreturntype(),fieldname,mvalue);\n      }\n    }\n    return value;\n  }\n  /** \n * ??????????\n * @param fields\n * @param clazz\n */\n  private void getpojofileds(  list<string> fields,  class<?> clazz){\n    method[] methods=clazz.getdeclaredmethods();\n    for (    method m : methods) {\n      string name=m.getname();\n      if (name.startswith(\"get\")) {\n        string returnvaluetype=m.getreturntype().getsimplename();\n        if (\"string\".equals(returnvaluetype) || \"integer\".equals(returnvaluetype) || \"long\".equals(returnvaluetype)|| \"double\".equals(returnvaluetype)|| \"float\".equals(returnvaluetype)|| \"boolean\".equals(returnvaluetype)|| \"short\".equalsignorecase(returnvaluetype)|| \"date\".equals(returnvaluetype)|| \"timestamp\".equals(returnvaluetype)|| \"hashmap\".equals(returnvaluetype)|| \"arraylist\".equals(returnvaluetype)) {\n          name=name.substring(3,4).tolowercase() + name.substring(4);\n        }\n else {\n          getpojofileds(fields,m.getreturntype());\n        }\n        fields.add(name);\n      }\n    }\n  }\n  /** \n * ?????????\n * @return\n */\n  private map<string,fieldlucproperty> getfieldlucproperty(){\n    map<string,fieldlucproperty> fieldpropertymap=new hashmap<string,fieldlucproperty>();\n    if (analyzedindexfields != null) {\n      for (      string analyzedindexfield : analyzedindexfields) {\n        fieldlucproperty fieldlucproperty=new fieldlucproperty();\n        fieldlucproperty.setfieldname(analyzedindexfield);\n        fieldlucproperty.setanalyzed(true);\n        fieldlucproperty.setstore(false);\n        fieldlucproperty.setindex(true);\n        fieldpropertymap.put(analyzedindexfield,fieldlucproperty);\n      }\n    }\n    if (notanalyzedindexfields != null) {\n      for (      string notanalyzedindexfield : notanalyzedindexfields) {\n        fieldlucproperty fieldlucproperty=new fieldlucproperty();\n        fieldlucproperty.setfieldname(notanalyzedindexfield);\n        fieldlucproperty.setindex(true);\n        fieldlucproperty.setanalyzed(false);\n        fieldlucproperty.setstore(false);\n        fieldpropertymap.put(notanalyzedindexfield,fieldlucproperty);\n      }\n    }\n    if (storefields != null) {\n      for (      string storefield : storefields) {\n        if (fieldpropertymap.containskey(storefield)) {\n          fieldlucproperty fieldlucproperty=fieldpropertymap.get(storefield);\n          fieldlucproperty.setstore(true);\n        }\n else {\n          fieldlucproperty fieldlucproperty=new fieldlucproperty();\n          fieldlucproperty.setfieldname(storefield);\n          fieldlucproperty.setindex(false);\n          fieldlucproperty.setanalyzed(false);\n          fieldlucproperty.setstore(true);\n          fieldpropertymap.put(storefield,fieldlucproperty);\n        }\n      }\n    }\n    return fieldpropertymap;\n  }\n  private static jsonconfig config;\nstatic {\n    config=new jsonconfig();\n    config.registerjsonvalueprocessor(java.sql.timestamp.class,new datejsonvalueprocessor(\"yyyy-mm-dd hh:mm:ss\"));\n    config.registerjsonvalueprocessor(java.util.date.class,new datejsonvalueprocessor(\"yyyy-mm-dd hh:mm:ss\"));\n    config.registerjsonvalueprocessor(java.sql.date.class,new datejsonvalueprocessor(\"yyyy-mm-dd hh:mm:ss\"));\n  }\nstatic class datejsonvalueprocessor implements jsonvalueprocessor {\n    private string format;\n    public datejsonvalueprocessor(    string format){\n      this.format=format;\n    }\n    @override public object processarrayvalue(    object arg0,    jsonconfig arg1){\n      return processobjectvalue(null,arg0,arg1);\n    }\n    @override public object processobjectvalue(    string key,    object value,    jsonconfig arg2){\n      if (value == null) {\n        return \"\";\n      }\n      if (value instanceof java.sql.timestamp) {\n        string str=new simpledateformat(format).format((java.sql.timestamp)value);\n        return str;\n      }\n      if (value instanceof java.util.date) {\n        string str=new simpledateformat(format).format((java.util.date)value);\n        return str;\n      }\n      return value.tostring();\n    }\n  }\n}\n');
INSERT INTO `classinfo` VALUES ('MyLuence-master', 'com.wind.myLuence.index.DateJsonValueProcessor', '0', '', 'JsonValueProcessor; ', 'static;', 23, 'C:\\Users\\Zero\\Desktop\\??\\MyLuence-master\\MyLuence-master\\src\\main\\java\\com\\wind\\myLuence\\index\\BeanIndex.java', 'static class datejsonvalueprocessor implements jsonvalueprocessor {\n  private string format;\n  public datejsonvalueprocessor(  string format){\n    this.format=format;\n  }\n  @override public object processarrayvalue(  object arg0,  jsonconfig arg1){\n    return processobjectvalue(null,arg0,arg1);\n  }\n  @override public object processobjectvalue(  string key,  object value,  jsonconfig arg2){\n    if (value == null) {\n      return \"\";\n    }\n    if (value instanceof java.sql.timestamp) {\n      string str=new simpledateformat(format).format((java.sql.timestamp)value);\n      return str;\n    }\n    if (value instanceof java.util.date) {\n      string str=new simpledateformat(format).format((java.util.date)value);\n      return str;\n    }\n    return value.tostring();\n  }\n}\n');
INSERT INTO `classinfo` VALUES ('MyLuence-master', 'com.wind.myLuence.Index', '1', '', 'Configurable; ', 'public;', 37, 'C:\\Users\\Zero\\Desktop\\??\\MyLuence-master\\MyLuence-master\\src\\main\\java\\com\\wind\\myLuence\\Index.java', 'public interface index extends configurable {\n  public void write(  list<object> datas) throws indexexception ;\n  public void append(  list<object> datas) throws indexexception ;\n  public void remove() throws indexexception ;\nclass fieldlucproperty {\n    private string fieldname;\n    private boolean isstore;\n    private boolean isindex;\n    private boolean isanalyzed;\n    public fieldlucproperty(){\n    }\n    public string getfieldname(){\n      return fieldname;\n    }\n    public void setfieldname(    string fieldname){\n      this.fieldname=fieldname;\n    }\n    public boolean isstore(){\n      return isstore;\n    }\n    public void setstore(    boolean isstore){\n      this.isstore=isstore;\n    }\n    public boolean isindex(){\n      return isindex;\n    }\n    public void setindex(    boolean isindex){\n      this.isindex=isindex;\n    }\n    public boolean isanalyzed(){\n      return isanalyzed;\n    }\n    public void setanalyzed(    boolean isanalyzed){\n      this.isanalyzed=isanalyzed;\n    }\n  }\n}\n');
INSERT INTO `classinfo` VALUES ('MyLuence-master', 'com.wind.myLuence.FieldLucproperty', '0', '', ' ', '', 32, 'C:\\Users\\Zero\\Desktop\\??\\MyLuence-master\\MyLuence-master\\src\\main\\java\\com\\wind\\myLuence\\Index.java', 'class fieldlucproperty {\n  private string fieldname;\n  private boolean isstore;\n  private boolean isindex;\n  private boolean isanalyzed;\n  public fieldlucproperty(){\n  }\n  public string getfieldname(){\n    return fieldname;\n  }\n  public void setfieldname(  string fieldname){\n    this.fieldname=fieldname;\n  }\n  public boolean isstore(){\n    return isstore;\n  }\n  public void setstore(  boolean isstore){\n    this.isstore=isstore;\n  }\n  public boolean isindex(){\n    return isindex;\n  }\n  public void setindex(  boolean isindex){\n    this.isindex=isindex;\n  }\n  public boolean isanalyzed(){\n    return isanalyzed;\n  }\n  public void setanalyzed(  boolean isanalyzed){\n    this.isanalyzed=isanalyzed;\n  }\n}\n');
INSERT INTO `classinfo` VALUES ('MyLuence-master', 'com.wind.myLuence.MyLuence', '0', '', ' ', 'public;', 99, 'C:\\Users\\Zero\\Desktop\\??\\MyLuence-master\\MyLuence-master\\src\\main\\java\\com\\wind\\myLuence\\MyLuence.java', '/** \n * myluence\n * @author zhouyanjun\n * @version 1.0 2014-8-28\n */\npublic class myluence {\n  private list<string> itemlist=new arraylist<string>();\n  private string configpath;\n  private map<string,indexsource> indexsourcemap;\n  private map<string,abstarctsearcher> searchermap;\n  private myluencefactory factory;\n  public void init() throws ioexception, classnotfoundexception, configurableexception {\n    indexsourcemap=new hashmap<string,indexsource>();\n    searchermap=new hashmap<string,abstarctsearcher>();\n    cffileparser cffileparser=null;\n    if (configpath.contains(\".properties\")) {\n      cffileparser=new propertiescfparser();\n    }\n else     if (configpath.contains(\".xml\")) {\n      cffileparser=new xmlcfparser();\n    }\n    cffileparser.setfilepath(configpath);\n    map<string,context> cfcontextmap=cffileparser.parse();\n    itemlist.addall(cfcontextmap.keyset());\n    for (    string cfcontextkey : cfcontextmap.keyset()) {\n      context context=cfcontextmap.get(cfcontextkey);\n      indexsource indexsource=factory.getixsourceinstance(context.getstring(cffileparser.configitem.indexsource.value));\n      indexsource.configure(context);\n      indexsourcemap.put(cfcontextkey,indexsource);\n      abstarctsearcher searcher=factory.getsearcherinstance();\n      searcher.configure(context);\n      searchermap.put(cfcontextkey,searcher);\n    }\n  }\n  public void writeindex(){\n    for (    string isourcekey : indexsourcemap.keyset()) {\n      indexsourcemap.get(isourcekey).initialdataopen();\n    }\n  }\n  public void writeindex(  string item) throws indexexception {\n    if (!itemlist.contains(item)) {\n      throw new indexexception(\"item doesn\'t exist.\");\n    }\n    indexsourcemap.get(item).initialdataopen();\n  }\n  public void appendindex(){\n    for (    string isourcekey : indexsourcemap.keyset()) {\n      indexsourcemap.get(isourcekey).increasedataopen();\n    }\n  }\n  public void appendindex(  string item) throws indexexception {\n    if (!itemlist.contains(item)) {\n      throw new indexexception(\"item doesn\'t exist.\");\n    }\n    indexsourcemap.get(item).increasedataopen();\n  }\n  public <t>list<t> search(  string item,  string querystr,  sort sort,  int num) throws searchexception {\n    if (!itemlist.contains(item)) {\n      throw new searchexception(\"item doesn\'t exist.\");\n    }\n    return searchermap.get(item).search(querystr,sort,num);\n  }\n  public <t>list<t> search(  string item,  string[] querystr,  sort sort,  int num) throws searchexception {\n    if (!itemlist.contains(item)) {\n      throw new searchexception(\"item doesn\'t exist.\");\n    }\n    return searchermap.get(item).search(querystr,sort,num);\n  }\n  public <t>list<t> search(  string item,  string querystr,  sort sort,  int pagesize,  int curpage) throws searchexception {\n    if (!itemlist.contains(item)) {\n      throw new searchexception(\"item doesn\'t exist.\");\n    }\n    return searchermap.get(item).search(querystr,sort,pagesize,curpage);\n  }\n  public <t>list<t> exactsearch(  string item,  map<string,list<string>> searchtermmap,  sort sort,  int num) throws searchexception {\n    if (!itemlist.contains(item)) {\n      throw new searchexception(\"item doesn\'t exist.\");\n    }\n    return searchermap.get(item).exactsearch(searchtermmap,sort,1);\n  }\n  public <t>list<t> search(  string item,  string[] querystr,  sort sort,  int pagesize,  int curpage) throws searchexception {\n    if (!itemlist.contains(item)) {\n      throw new searchexception(\"item doesn\'t exist.\");\n    }\n    return searchermap.get(item).search(querystr,sort,pagesize,curpage);\n  }\n  public string getconfigpath(){\n    return configpath;\n  }\n  public void setconfigpath(  string configpath){\n    this.configpath=configpath;\n  }\n  public myluencefactory getfactory(){\n    return factory;\n  }\n  public void setfactory(  myluencefactory factory){\n    this.factory=factory;\n  }\n}\n');
INSERT INTO `classinfo` VALUES ('MyLuence-master', 'com.wind.myLuence.PropertyParser', '0', '', ' ', 'public;', 25, 'C:\\Users\\Zero\\Desktop\\??\\MyLuence-master\\MyLuence-master\\src\\main\\java\\com\\wind\\myLuence\\PropertyParser.java', 'public class propertyparser {\n  public static map<string,string> parse(  string filepath) throws ioexception {\n    properties prop=new properties();\n    prop.load(propertyparser.class.getresourceasstream(filepath));\n    map<string,string> configs=new hashmap<string,string>();\n    enumeration<?> keys=prop.keys();\n    while (keys.hasmoreelements()) {\n      string key=(string)keys.nextelement();\n      string value=(string)prop.get(key);\n      configs.put(key,value);\n    }\n    return configs;\n  }\n  public static void main(  string[] args){\n    try {\n      map<string,string> map=propertyparser.parse(\"/data/lucence_strategy.properties\");\n      for (      string key : map.keyset()) {\n        system.out.println(key + \"@\" + map.get(key));\n      }\n    }\n catch (    ioexception e) {\n      e.printstacktrace();\n    }\n  }\n}\n');
INSERT INTO `classinfo` VALUES ('MyLuence-master', 'com.wind.myLuence.search.AbstarctSearcher', '0', '', 'Configurable; ', 'public;abstract;', 15, 'C:\\Users\\Zero\\Desktop\\??\\MyLuence-master\\MyLuence-master\\src\\main\\java\\com\\wind\\myLuence\\search\\AbstarctSearcher.java', 'public abstract class abstarctsearcher implements configurable {\n  protected analyzer analyzer;\n  protected fsdirectory directory;\n  public abstract <t>list<t> search(  string querystr,  sort sort,  int num);\n  public abstract <t>list<t> search(  string querystr,  sort sort,  int pagesize,  int curpage);\n  public abstract <t>list<t> search(  string[] querystr,  sort sort,  int pagesize,  int curpage);\n  public abstract <t>list<t> search(  string[] querystrs,  sort sort,  int num);\n  public abstract <t>list<t> exactsearch(  map<string,list<string>> searchtermmap,  sort sort,  int num);\n  public analyzer getanalyzer(){\n    return analyzer;\n  }\n  public void setanalyzer(  analyzer analyzer){\n    this.analyzer=analyzer;\n  }\n}\n');
INSERT INTO `classinfo` VALUES ('MyLuence-master', 'com.wind.myLuence.search.BeanSearcher', '0', 'com.wind.myLuence.search.AbstarctSearcher', ' ', 'public;', 361, 'C:\\Users\\Zero\\Desktop\\??\\MyLuence-master\\MyLuence-master\\src\\main\\java\\com\\wind\\myLuence\\search\\BeanSearcher.java', '/** \n * bean???\n * @author zhouyanjun\n * @version 1.0 2014-8-20\n */\npublic class beansearcher extends abstarctsearcher {\n  private final logger logger=loggerfactory.getlogger(this.getclass());\n  private static final string analyzedindexfields=\"analyzedindexfields\";\n  private static final string notanalyzedindexfields=\"notanalyzedindexfields\";\n  private static final string classname=\"beanclass\";\n  private static final string storefields=\"storefields\";\n  private static final string analyzerclass=\"analyzerclass\";\n  private static final string indexfilepath=\"indexfilepath\";\n  private static final string datafieldname_default=\"data\";\n  private list<string> analyzedindexkeys=new arraylist<string>();\n  private list<string> notanalyzedindexkeys=new arraylist<string>();\n  private list<string> storekeys=new arraylist<string>();\n  private class<?> clazz;\n  private boolean hasdatakey;\n{\n    jsonutils.getmorpherregistry().registermorpher(new datemorpher(new string[]{\"yyyy-mm-dd hh:mm:ss\"}));\n  }\n  @suppresswarnings(\"unchecked\") @override public <t>list<t> search(  string querystr,  sort sort,  int num){\n    list<t> results=new arraylist<t>();\n    try {\n      indexsearcher searcher=new indexsearcher(directoryreader.open(directory));\n      multifieldqueryparser parser=new multifieldqueryparser(version.lucene_46,analyzedindexkeys.toarray(new string[]{}),analyzer);\n      query q=parser.parse(querystr);\n      topdocs topdocs=searcher.search(q,num);\n      scoredoc[] doslist=topdocs.scoredocs;\n      for (int i=0; i < doslist.length; i++) {\n        document doc=searcher.doc(doslist[i].doc);\n        if (hasdatakey) {\n          string objjson=doc.get(datafieldname_default);\n          t t=(t)jsonobject.tobean(jsonobject.fromobject(objjson),clazz);\n          results.add(t);\n        }\n else {\n          t t=(t)clazz.newinstance();\n          for (          string storekey : storekeys) {\n            string value=doc.get(storekey);\n            map<string,string> fieldnametypes=getfieldnametype(clazz);\n            setfieldvalue(clazz,storekey,value,fieldnametypes.get(storekey),t);\n          }\n          results.add(t);\n        }\n      }\n    }\n catch (    parseexception e) {\n      logger.error(e.getmessage(),e);\n    }\ncatch (    ioexception e) {\n      logger.error(e.getmessage(),e);\n    }\ncatch (    exception e) {\n      logger.error(e.getmessage(),e);\n    }\n    return results;\n  }\n  @suppresswarnings(\"unchecked\") @override public <t>list<t> search(  string[] querystrs,  sort sort,  int num){\n    list<t> results=new arraylist<t>();\n    try {\n      indexsearcher searcher=new indexsearcher(directoryreader.open(directory));\n      multifieldqueryparser parser=new multifieldqueryparser(version.lucene_46,analyzedindexkeys.toarray(new string[]{}),analyzer);\n      for (      string querystr : querystrs) {\n        query q=parser.parse(querystr);\n        topdocs topdocs=searcher.search(q,num);\n        scoredoc[] doslist=topdocs.scoredocs;\n        for (int i=0; i < doslist.length; i++) {\n          document doc=searcher.doc(doslist[i].doc);\n          if (hasdatakey) {\n            string objjson=doc.get(datafieldname_default);\n            t t=(t)jsonobject.tobean(jsonobject.fromobject(objjson),clazz);\n            results.add(t);\n          }\n else {\n            t t=(t)clazz.newinstance();\n            for (            string storekey : storekeys) {\n              string value=doc.get(storekey);\n              map<string,string> fieldnametypes=getfieldnametype(clazz);\n              setfieldvalue(clazz,storekey,value,fieldnametypes.get(storekey),t);\n            }\n            results.add(t);\n          }\n        }\n      }\n    }\n catch (    parseexception e) {\n      logger.error(e.getmessage(),e);\n    }\ncatch (    ioexception e) {\n      logger.error(e.getmessage(),e);\n    }\ncatch (    exception e) {\n      logger.error(e.getmessage(),e);\n    }\n    return results;\n  }\n  @suppresswarnings(\"unchecked\") @override public <t>list<t> search(  string querystr,  sort sort,  int pagesize,  int curpage){\n    list<t> results=new arraylist<t>();\n    try {\n      indexsearcher searcher=new indexsearcher(directoryreader.open(directory));\n      multifieldqueryparser parser=new multifieldqueryparser(version.lucene_46,analyzedindexkeys.toarray(new string[]{}),analyzer);\n      query q=parser.parse(querystr);\n      topdocs topdocs=searcher.search(q,3000);\n      scoredoc[] doslist=topdocs.scoredocs;\n      int begin=pagesize * (curpage - 1);\n      int end=math.min(begin + pagesize,doslist.length);\n      for (int i=begin; i < end; i++) {\n        document doc=searcher.doc(doslist[i].doc);\n        if (hasdatakey) {\n          string objjson=doc.get(datafieldname_default);\n          t t=(t)jsonobject.tobean(jsonobject.fromobject(objjson),clazz);\n          results.add(t);\n        }\n else {\n          t t=(t)clazz.newinstance();\n          for (          string storekey : storekeys) {\n            string value=doc.get(storekey);\n            map<string,string> fieldnametypes=getfieldnametype(clazz);\n            setfieldvalue(clazz,storekey,value,fieldnametypes.get(storekey),t);\n          }\n          results.add(t);\n        }\n      }\n    }\n catch (    parseexception e) {\n      logger.error(e.getmessage(),e);\n    }\ncatch (    ioexception e) {\n      logger.error(e.getmessage(),e);\n    }\ncatch (    exception e) {\n      logger.error(e.getmessage(),e);\n    }\n    return results;\n  }\n  @suppresswarnings(\"unchecked\") @override public <t>list<t> search(  string[] querystr,  sort sort,  int pagesize,  int curpage){\n    list<t> results=new arraylist<t>();\n    try {\n      indexsearcher searcher=new indexsearcher(directoryreader.open(directory));\n      booleanquery bquery=new booleanquery();\n      multifieldqueryparser parser=new multifieldqueryparser(version.lucene_46,analyzedindexkeys.toarray(new string[]{}),analyzer);\n      for (int i=0; i < querystr.length; i++) {\n        query query=parser.parse(querystr[i]);\n        bquery.add(query,booleanclause.occur.should);\n      }\n      topdocs topdocs=searcher.search(bquery,3000);\n      scoredoc[] doslist=topdocs.scoredocs;\n      int begin=pagesize * (curpage - 1);\n      int end=math.min(begin + pagesize,doslist.length);\n      for (int i=begin; i < end; i++) {\n        document doc=searcher.doc(doslist[i].doc);\n        if (hasdatakey) {\n          string objjson=doc.get(datafieldname_default);\n          t t=(t)jsonobject.tobean(jsonobject.fromobject(objjson),clazz);\n          results.add(t);\n        }\n else {\n          t t=(t)clazz.newinstance();\n          for (          string storekey : storekeys) {\n            string value=doc.get(storekey);\n            map<string,string> fieldnametypes=getfieldnametype(clazz);\n            setfieldvalue(clazz,storekey,value,fieldnametypes.get(storekey),t);\n          }\n          results.add(t);\n        }\n      }\n    }\n catch (    parseexception e) {\n      logger.error(e.getmessage(),e);\n    }\ncatch (    exception e) {\n      logger.error(e.getmessage(),e);\n    }\n    return results;\n  }\n  @suppresswarnings(\"unchecked\") @override public <t>list<t> exactsearch(  map<string,list<string>> searchtermmap,  sort sort,  int num){\n    list<t> results=new arraylist<t>();\n    try {\n      if (!notanalyzedindexkeys.containsall(searchtermmap.keyset())) {\n        throw new searchexception(\"search key collection don\'t exist.\");\n      }\n      indexsearcher searcher=new indexsearcher(directoryreader.open(directory));\n      for (      string searchkey : searchtermmap.keyset()) {\n        list<string> searchtermlist=searchtermmap.get(searchkey);\n        for (        string searchterm : searchtermlist) {\n          query query=new termquery(new term(searchkey,searchterm));\n          topdocs topdocs=searcher.search(query,num);\n          scoredoc[] doslist=topdocs.scoredocs;\n          for (int i=0; i < doslist.length; i++) {\n            document doc=searcher.doc(doslist[i].doc);\n            if (hasdatakey) {\n              string objjson=doc.get(datafieldname_default);\n              t t=(t)jsonobject.tobean(jsonobject.fromobject(objjson),clazz);\n              results.add(t);\n            }\n else {\n              t t=(t)clazz.newinstance();\n              for (              string storekey : storekeys) {\n                string value=doc.get(storekey);\n                map<string,string> fieldnametypes=getfieldnametype(clazz);\n                setfieldvalue(clazz,storekey,value,fieldnametypes.get(storekey),t);\n              }\n              results.add(t);\n            }\n          }\n        }\n      }\n    }\n catch (    parseexception e) {\n      logger.error(e.getmessage(),e);\n    }\ncatch (    exception e) {\n      logger.error(e.getmessage(),e);\n    }\n    return results;\n  }\n  public void configure(  context context) throws configurableexception {\n    try {\n      string analyzerclass=context.getstring(analyzerclass);\n      this.analyzer=(analyzer)class.forname(analyzerclass).newinstance();\n      list<string> pojofields=new arraylist<string>();\n      string classname=context.getstring(classname);\n      try {\n        this.clazz=class.forname(classname);\n        getpojofileds(pojofields,clazz);\n      }\n catch (      classnotfoundexception e1) {\n        logger.error(\"bean class error to create.\");\n        throw new configurableexception(e1.getmessage(),e1);\n      }\n      string analyzedindexfields=context.getstring(analyzedindexfields);\n      if (analyzedindexfields != null && !analyzedindexfields.isempty()) {\n        list<string> analyzedindexfieldlist=new arraylist<string>(arrays.aslist(analyzedindexfields.split(\",\")));\n        if (!pojofields.containsall(analyzedindexfieldlist)) {\n          logger.error(\"indexfield\'s range beyong the range of pojofields\");\n          throw new configurableexception(\"indexfield\'s range beyong the range of pojofields\");\n        }\n        analyzedindexkeys.addall(analyzedindexfieldlist);\n      }\n      string notanalyzedindexfields=context.getstring(notanalyzedindexfields);\n      if (notanalyzedindexfields != null && !notanalyzedindexfields.isempty()) {\n        list<string> notanalyzedindexfieldlist=new arraylist<string>(arrays.aslist(notanalyzedindexfields.split(\",\")));\n        if (!pojofields.containsall(notanalyzedindexfieldlist)) {\n          logger.error(\"notanalyzedindexfields\'s range beyong the range of pojofields\");\n          throw new configurableexception(\"notanalyzedindexfields\'s range beyong the range of pojofields\");\n        }\n        notanalyzedindexkeys.addall(notanalyzedindexfieldlist);\n      }\n      string storefields=context.getstring(storefields);\n      if (storefields != null && !storefields.isempty()) {\n        list<string> storefieldlist=new arraylist<string>(arrays.aslist(storefields.split(\",\")));\n        if (!pojofields.containsall(storefieldlist) && !storefieldlist.contains(datafieldname_default)) {\n          logger.error(\"storefields\'s range beyong the range of pojofields\");\n          throw new configurableexception(\"storefields\'s range beyong the range of pojofields\");\n        }\n        storekeys.addall(storefieldlist);\n      }\n      if (storekeys.contains(datafieldname_default)) {\n        hasdatakey=true;\n      }\n      string indexfilepath=context.getstring(indexfilepath);\n      if (indexfilepath == null || indexfilepath.isempty()) {\n        logger.error(\"indexfilepath must to be set.\");\n        throw new configurableexception(\"indexfilepath must to be set.\");\n      }\n      try {\n        this.directory=fsdirectory.open(new file(indexfilepath));\n      }\n catch (      ioexception e) {\n        logger.error(\"index file dir error to create.\");\n        throw new configurableexception(\"index file dir error to create.\");\n      }\n    }\n catch (    instantiationexception e2) {\n      log.error(this.getclass(),e2.getmessage());\n      throw new configurableexception(e2.getmessage(),e2);\n    }\ncatch (    illegalaccessexception e2) {\n      log.error(this.getclass(),e2.getmessage());\n      throw new configurableexception(e2.getmessage(),e2);\n    }\ncatch (    classnotfoundexception e2) {\n      log.error(this.getclass(),e2.getmessage());\n      throw new configurableexception(e2.getmessage(),e2);\n    }\n  }\n  /** \n * ??????????\n * @param fields\n * @param clazz\n */\n  private void getpojofileds(  list<string> fields,  class<?> clazz){\n    method[] methods=clazz.getdeclaredmethods();\n    for (    method m : methods) {\n      string name=m.getname();\n      if (name.startswith(\"get\")) {\n        string returnvaluetype=m.getreturntype().getsimplename();\n        if (\"string\".equals(returnvaluetype) || \"integer\".equals(returnvaluetype) || \"long\".equals(returnvaluetype)|| \"double\".equals(returnvaluetype)|| \"float\".equals(returnvaluetype)|| \"boolean\".equals(returnvaluetype)|| \"short\".equalsignorecase(returnvaluetype)|| \"date\".equals(returnvaluetype)|| \"timestamp\".equals(returnvaluetype)|| \"hashmap\".equals(returnvaluetype)|| \"arraylist\".equals(returnvaluetype)) {\n          name=name.substring(3,4).tolowercase() + name.substring(4);\n        }\n else {\n          getpojofileds(fields,m.getreturntype());\n        }\n        fields.add(name);\n      }\n    }\n  }\n  private void setfieldvalue(  class<?> clazz,  string fieldname,  string fieldvalue,  string fieldtype,  object data) throws exception {\n    object relvalue=null;\n    if (\"string\".equals(fieldtype)) {\n      relvalue=fieldvalue;\n    }\n else     if (\"integer\".equals(fieldtype)) {\n      relvalue=integer.parseint(fieldvalue);\n    }\n else     if (\"long\".equals(fieldtype)) {\n      relvalue=long.parselong(fieldvalue);\n    }\n else     if (\"double\".equals(fieldtype)) {\n      relvalue=double.parsedouble(fieldvalue);\n    }\n else     if (\"float\".equals(fieldtype)) {\n      relvalue=float.parsefloat(fieldvalue);\n    }\n else     if (\"boolean\".equals(fieldtype)) {\n      relvalue=boolean.parseboolean(fieldvalue);\n    }\n else     if (\"short\".equalsignorecase(fieldtype)) {\n      relvalue=short.parseshort(fieldvalue);\n    }\n else     if (\"date\".equals(fieldtype)) {\n      relvalue=dateutil.parsetime(fieldvalue);\n    }\n else     if (\"timestamp\".equals(fieldvalue)) {\n      relvalue=dateutil.parsetime(fieldvalue);\n    }\n else     if (\"hashmap\".equals(fieldvalue)) {\n      relvalue=jsonobject.tobean(jsonobject.fromobject(fieldvalue),hashmap.class);\n    }\n else     if (\"arraylist\".equals(fieldvalue)) {\n      relvalue=jsonarray.toarray(jsonarray.fromobject(fieldvalue));\n    }\n    method m=clazz.getmethod(\"set\" + fieldname.substring(0,1).touppercase() + fieldname.substring(1));\n    m.invoke(data,relvalue);\n  }\n  private map<string,string> getfieldnametype(  class<?> clazz){\n    map<string,string> fieldnametypemap=new hashmap<string,string>();\n    method[] methods=clazz.getdeclaredmethods();\n    for (    method m : methods) {\n      string name=m.getname();\n      if (name.startswith(\"set\")) {\n        string returnvaluetype=m.getreturntype().getsimplename();\n        name=name.substring(3,4).tolowercase() + name.substring(4);\n        fieldnametypemap.put(name,returnvaluetype);\n      }\n    }\n    return fieldnametypemap;\n  }\n}\n');
INSERT INTO `classinfo` VALUES ('MyLuence-master', 'com.wind.myLuence.source.BeanSource', '0', '', 'DataSource; ', 'public;', 15, 'C:\\Users\\Zero\\Desktop\\??\\MyLuence-master\\MyLuence-master\\src\\main\\java\\com\\wind\\myLuence\\source\\BeanSource.java', '/** \n * bean?\n * @author zhouyanjun\n * @version 1.0 2014-4-24\n */\npublic class beansource implements datasource {\n  public void configure(  context context) throws configurableexception {\n  }\n  public void open(  index index){\n  }\n  @override public void initialdataopen(){\n  }\n  @override public void increasedataopen(){\n  }\n}\n');
INSERT INTO `classinfo` VALUES ('MyLuence-master', 'com.wind.myLuence.source.DDALDatabaseSource', '0', 'com.wind.myLuence.source.IndexSource', ' ', 'public;', 190, 'C:\\Users\\Zero\\Desktop\\??\\MyLuence-master\\MyLuence-master\\src\\main\\java\\com\\wind\\myLuence\\source\\DDALDatabaseSource.java', '/** \n * ddal???\n * @author zhouyanjun\n * @version 1.0 2014-4-24\n */\npublic class ddaldatabasesource extends indexsource {\n  private final logger logger=loggerfactory.getlogger(ddaldatabasesource.class);\n  private asynddalhelper asynhelper;\n  private class<?> pojoclass;\n  private incfieldrw incfieldrw;\n  private map<string,string> fieldfiltermap=new hashmap<string,string>();\n  public void configure(  context context) throws configurableexception, classnotfoundexception {\n    string classpath=context.getstring(cffileparser.configitem.beanclass.value);\n    pojoclass=class.forname(classpath);\n    string incfield=context.getstring(cffileparser.configitem.incfield.value);\n    if (incfield != null) {\n      string indexpath=context.getstring(cffileparser.configitem.indexfilepath.value);\n      string incfieldpath=indexpath + \"/inc/fieldlast.txt\";\n      incfieldrw=new incfieldrw(incfield,new file(incfieldpath),pojoclass);\n    }\n    string datafilterstr=context.getstring(cffileparser.configitem.datafilter.value);\n    if (datafilterstr != null) {\n      string[] datafilterarray=datafilterstr.split(\":\");\n      fieldfiltermap.put(datafilterarray[0],datafilterarray[1]);\n    }\n    index.configure(context);\n  }\n  @override public void initialdataopen(){\n    dataorder order=null;\n    if (incfieldrw != null) {\n      order=new dataorder(incfieldrw.incfieldname,true);\n    }\n    list<condition> filter=new arraylist<condition>();\n    if (!fieldfiltermap.isempty()) {\n      for (      string field : fieldfiltermap.keyset()) {\n        filter.add(new condition(field,fieldfiltermap.get(field)));\n      }\n    }\n    asynhelper.query(pojoclass,null,integer.max_value,(filter.isempty() ? null : filter),order,new reslistcallback<object>(){\n      @override public void succeed(      list<object> datas) throws exception {\n        if (datas != null && !datas.isempty() && incfieldrw != null) {\n          incfieldrw.writevalue(datas.get(0));\n        }\n        beanindex databaseindex=(beanindex)index;\n        databaseindex.write(datas);\n      }\n      @override public void failure(      resultvo result) throws exception {\n        logger.error(result.geterrormsg());\n      }\n    }\n);\n  }\n  @override public void increasedataopen(){\n    if (incfieldrw == null) {\n      throw new nullpointerexception(\"increase field doesn\'t set\");\n    }\n    try {\n      list<condition> filter=new arraylist<condition>();\n      filter.add(new condition(incfieldrw.incfieldname,compares.more_than,incfieldrw.readvalue()));\n      if (!fieldfiltermap.isempty()) {\n        for (        string field : fieldfiltermap.keyset()) {\n          filter.add(new condition(field,fieldfiltermap.get(field)));\n        }\n      }\n      dataorder order=new dataorder(incfieldrw.incfieldname,true);\n      asynhelper.query(pojoclass,null,filter,order,null,new reslistcallback<object>(){\n        @override public void succeed(        list<object> datas) throws exception {\n          if (datas != null && !datas.isempty()) {\n            incfieldrw.writevalue(datas.get(0));\n          }\n          beanindex databaseindex=(beanindex)index;\n          databaseindex.append(datas);\n        }\n        @override public void failure(        resultvo result) throws exception {\n          logger.error(result.geterrormsg());\n        }\n      }\n);\n    }\n catch (    exception e) {\n      logger.error(e.getmessage(),e);\n    }\n  }\nclass incfieldrw {\n    protected file incfieldlaststore;\n    protected string incfieldname;\n    private class<?> clazz;\n    private static final string fieldtype=\"type\";\n    private simpledateformat timeformat=new simpledateformat(\"yyyy-mm-dd hh:mm:ss\");\n    incfieldrw(    string incfieldname,    file incfieldlaststore,    class<?> clazz){\n      this.incfieldname=incfieldname;\n      this.incfieldlaststore=incfieldlaststore;\n      this.clazz=clazz;\n    }\n    /** \n * ???????\n * @param clazz\n * @param fieldname\n * @param data\n * @throws exception\n */\n    protected void writevalue(    object data) throws exception {\n      string value=null;\n      method m=clazz.getmethod(\"get\" + incfieldname.substring(0,1).touppercase() + incfieldname.substring(1));\n      string returnvaluetype=m.getreturntype().getsimplename();\n      object mvalue=m.invoke(data);\n      if (mvalue != null) {\n        if (\"integer\".equals(returnvaluetype) || \"long\".equals(returnvaluetype) || \"short\".equalsignorecase(returnvaluetype)) {\n          value=mvalue.tostring();\n        }\n else         if (\"date\".equals(returnvaluetype)) {\n          value=timeformat.format((date)mvalue);\n        }\n else         if (\"timestamp\".equals(returnvaluetype)) {\n          value=timeformat.format((timestamp)mvalue);\n        }\n      }\n      map<string,string> map=new hashmap<string,string>();\n      map.put(incfieldname,value);\n      map.put(fieldtype,returnvaluetype);\n      jsonobjutil.savejson2file(new jsonobject(map),incfieldlaststore);\n    }\n    /** \n * ???????\n * @return\n * @throws exception\n */\n    protected object readvalue() throws exception {\n      object result=null;\n      if (incfieldlaststore.exists()) {\n        string content=jsonobjutil.getfilejsoncontent(incfieldlaststore);\n        jsonobject jsonobeject=new jsonobject(content);\n        string value=jsonobeject.getstring(incfieldname);\n        string fieldtype=jsonobeject.getstring(fieldtype);\n        if (\"integer\".equals(fieldtype)) {\n          result=integer.parseint(value);\n        }\n else         if (\"long\".equals(fieldtype)) {\n          result=long.parselong(value);\n        }\n else         if (\"short\".equals(fieldtype)) {\n          result=short.parseshort(value);\n        }\n else         if (\"date\".equals(fieldtype)) {\n          result=timeformat.parse(value);\n        }\n else         if (\"timestamp\".equals(fieldtype)) {\n          result=timeformat.parse(value);\n        }\n      }\n      return result;\n    }\n  }\n  public asynddalhelper getasynhelper(){\n    return asynhelper;\n  }\n  public void setasynhelper(  asynddalhelper asynhelper){\n    this.asynhelper=asynhelper;\n  }\n  private static jsonconfig config;\nstatic {\n    config=new jsonconfig();\n    config.registerjsonvalueprocessor(java.sql.timestamp.class,new datejsonvalueprocessor(\"yyyy-mm-dd hh:mm:ss\"));\n    config.registerjsonvalueprocessor(java.util.date.class,new datejsonvalueprocessor(\"yyyy-mm-dd hh:mm:ss\"));\n    config.registerjsonvalueprocessor(java.sql.date.class,new datejsonvalueprocessor(\"yyyy-mm-dd hh:mm:ss\"));\n  }\nstatic class datejsonvalueprocessor implements jsonvalueprocessor {\n    private string format;\n    public datejsonvalueprocessor(    string format){\n      this.format=format;\n    }\n    @override public object processarrayvalue(    object arg0,    jsonconfig arg1){\n      return processobjectvalue(null,arg0,arg1);\n    }\n    @override public object processobjectvalue(    string key,    object value,    jsonconfig arg2){\n      if (value == null) {\n        return \"\";\n      }\n      if (value instanceof java.sql.timestamp) {\n        string str=new simpledateformat(format).format((java.sql.timestamp)value);\n        return str;\n      }\n      if (value instanceof java.util.date) {\n        string str=new simpledateformat(format).format((java.util.date)value);\n        return str;\n      }\n      return value.tostring();\n    }\n  }\n}\n');
INSERT INTO `classinfo` VALUES ('MyLuence-master', 'anonymous', '0', '', ' ', '', 433, '', '');
INSERT INTO `classinfo` VALUES ('MyLuence-master', 'anonymous', '0', '', ' ', '', 415, '', '');
INSERT INTO `classinfo` VALUES ('MyLuence-master', 'com.wind.myLuence.source.IncFieldRW', '0', '', ' ', '', 70, 'C:\\Users\\Zero\\Desktop\\??\\MyLuence-master\\MyLuence-master\\src\\main\\java\\com\\wind\\myLuence\\source\\DDALDatabaseSource.java', 'class incfieldrw {\n  protected file incfieldlaststore;\n  protected string incfieldname;\n  private class<?> clazz;\n  private static final string fieldtype=\"type\";\n  private simpledateformat timeformat=new simpledateformat(\"yyyy-mm-dd hh:mm:ss\");\n  incfieldrw(  string incfieldname,  file incfieldlaststore,  class<?> clazz){\n    this.incfieldname=incfieldname;\n    this.incfieldlaststore=incfieldlaststore;\n    this.clazz=clazz;\n  }\n  /** \n * ???????\n * @param clazz\n * @param fieldname\n * @param data\n * @throws exception\n */\n  protected void writevalue(  object data) throws exception {\n    string value=null;\n    method m=clazz.getmethod(\"get\" + incfieldname.substring(0,1).touppercase() + incfieldname.substring(1));\n    string returnvaluetype=m.getreturntype().getsimplename();\n    object mvalue=m.invoke(data);\n    if (mvalue != null) {\n      if (\"integer\".equals(returnvaluetype) || \"long\".equals(returnvaluetype) || \"short\".equalsignorecase(returnvaluetype)) {\n        value=mvalue.tostring();\n      }\n else       if (\"date\".equals(returnvaluetype)) {\n        value=timeformat.format((date)mvalue);\n      }\n else       if (\"timestamp\".equals(returnvaluetype)) {\n        value=timeformat.format((timestamp)mvalue);\n      }\n    }\n    map<string,string> map=new hashmap<string,string>();\n    map.put(incfieldname,value);\n    map.put(fieldtype,returnvaluetype);\n    jsonobjutil.savejson2file(new jsonobject(map),incfieldlaststore);\n  }\n  /** \n * ???????\n * @return\n * @throws exception\n */\n  protected object readvalue() throws exception {\n    object result=null;\n    if (incfieldlaststore.exists()) {\n      string content=jsonobjutil.getfilejsoncontent(incfieldlaststore);\n      jsonobject jsonobeject=new jsonobject(content);\n      string value=jsonobeject.getstring(incfieldname);\n      string fieldtype=jsonobeject.getstring(fieldtype);\n      if (\"integer\".equals(fieldtype)) {\n        result=integer.parseint(value);\n      }\n else       if (\"long\".equals(fieldtype)) {\n        result=long.parselong(value);\n      }\n else       if (\"short\".equals(fieldtype)) {\n        result=short.parseshort(value);\n      }\n else       if (\"date\".equals(fieldtype)) {\n        result=timeformat.parse(value);\n      }\n else       if (\"timestamp\".equals(fieldtype)) {\n        result=timeformat.parse(value);\n      }\n    }\n    return result;\n  }\n}\n');
INSERT INTO `classinfo` VALUES ('MyLuence-master', 'com.wind.myLuence.source.DateJsonValueProcessor', '0', '', 'JsonValueProcessor; ', 'static;', 23, 'C:\\Users\\Zero\\Desktop\\??\\MyLuence-master\\MyLuence-master\\src\\main\\java\\com\\wind\\myLuence\\source\\DDALDatabaseSource.java', 'static class datejsonvalueprocessor implements jsonvalueprocessor {\n  private string format;\n  public datejsonvalueprocessor(  string format){\n    this.format=format;\n  }\n  @override public object processarrayvalue(  object arg0,  jsonconfig arg1){\n    return processobjectvalue(null,arg0,arg1);\n  }\n  @override public object processobjectvalue(  string key,  object value,  jsonconfig arg2){\n    if (value == null) {\n      return \"\";\n    }\n    if (value instanceof java.sql.timestamp) {\n      string str=new simpledateformat(format).format((java.sql.timestamp)value);\n      return str;\n    }\n    if (value instanceof java.util.date) {\n      string str=new simpledateformat(format).format((java.util.date)value);\n      return str;\n    }\n    return value.tostring();\n  }\n}\n');
INSERT INTO `classinfo` VALUES ('MyLuence-master', 'com.wind.myLuence.source.IndexSource', '0', '', 'DataSource; ', 'public;abstract;', 14, 'C:\\Users\\Zero\\Desktop\\??\\MyLuence-master\\MyLuence-master\\src\\main\\java\\com\\wind\\myLuence\\source\\IndexSource.java', '/** \n * ????\n * @author zhouyanjun\n * @version 1.0 2014-4-24\n */\npublic abstract class indexsource implements datasource {\n  protected index index;\n  public index getindex(){\n    return index;\n  }\n  public void setindex(  index index){\n    this.index=index;\n  }\n}\n');
INSERT INTO `classinfo` VALUES ('MyLuence-master', 'com.wind.myLuence.util.ClassUtil', '0', '', ' ', 'public;', 20, 'C:\\Users\\Zero\\Desktop\\??\\MyLuence-master\\MyLuence-master\\src\\main\\java\\com\\wind\\myLuence\\util\\ClassUtil.java', 'public class classutil {\n  public static map<string,string> getfieldnametype(  class<?> clazz){\n    map<string,string> fieldnametypemap=new hashmap<string,string>();\n    if (clazz != null) {\n      field[] fields=clazz.getdeclaredfields();\n      for (int j=0; j < fields.length; j++) {\n        string fieldname=fields[j].getname();\n        string classpath=fields[j].gettype().getname();\n        fieldnametypemap.put(fieldname,classpath);\n      }\n    }\n    return fieldnametypemap;\n  }\n  public static void main(  string[] args) throws classnotfoundexception {\n    map<string,string> fields=getfieldnametype(class.forname(\"com.snail.cloudlevel.app.assistant.res.ydlcrawlstrategy\"));\n    for (    string field : fields.keyset()) {\n      system.out.println(field + \"  :\" + fields.get(field));\n    }\n  }\n}\n');
INSERT INTO `classinfo` VALUES ('MyLuence-master', 'com.wind.Paint_MyLuence.util.DateUtil', '0', '', ' ', 'public;', 28, 'C:\\Users\\Zero\\Desktop\\??\\MyLuence-master\\MyLuence-master\\src\\main\\java\\com\\wind\\myLuence\\util\\DateUtil.java', '/** \n * ??util\n * @author zhouyanjun\n * @version 1.0 2014-8-26\n */\npublic class dateutil {\n  public final static simpledateformat timeformat=new simpledateformat(\"yyyy-mm-dd hh:mm:ss\");\n  /** \n * ????yyyy-mm-dd hh:mm:ss????????????\n * @param date\n * @return\n * @throws parseexception\n */\n  public synchronized static date parsetime(  string date) throws parseexception {\n    if (date == null || date.isempty())     return null;\n    date d=null;\n    return timeformat.parse(date);\n  }\n  /** \n * ????????yyyy-mm-dd hh:mm:ss?????????\n * @param date\n * @return\n */\n  public synchronized static string timeformat(  date date){\n    if (date == null)     return null;\n    return timeformat.format(date);\n  }\n}\n');

-- ----------------------------
-- Table structure for classrelationinfo
-- ----------------------------
DROP TABLE IF EXISTS `classrelationinfo`;
CREATE TABLE `classrelationinfo`  (
  `projectName` text CHARACTER SET utf8 COLLATE utf8_general_ci NULL,
  `fromClass` text CHARACTER SET utf8 COLLATE utf8_general_ci NULL,
  `frommethod` text CHARACTER SET utf8 COLLATE utf8_general_ci NULL,
  `toClass` text CHARACTER SET utf8 COLLATE utf8_general_ci NULL,
  `relationType` text CHARACTER SET utf8 COLLATE utf8_general_ci NULL
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of classrelationinfo
-- ----------------------------
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', 'com.wind.myLuence.index.BeanIndex', '', 'String,FieldLucproperty', '2');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', 'com.wind.myLuence.MyLuence', '', 'String,IndexSource', '2');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', 'com.wind.myLuence.MyLuence', '', 'String,AbstarctSearcher', '2');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', 'com.wind.myLuence.MyLuence', '', 'com.wind.myLuence.factory.MyLuenceFactory', '2');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', 'com.wind.myLuence.source.DDALDatabaseSource', '', 'com.wind.myLuence.source.IncFieldRW', '2');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', 'com.wind.myLuence.source.IndexSource', '', 'com.wind.myLuence.Index', '2');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');
INSERT INTO `classrelationinfo` VALUES ('MyLuence-master', '', '', '', '1');

-- ----------------------------
-- Table structure for cluster
-- ----------------------------
DROP TABLE IF EXISTS `cluster`;
CREATE TABLE `cluster`  (
  `projectName` text CHARACTER SET utf8 COLLATE utf8_general_ci NULL,
  `clustertype` text CHARACTER SET utf8 COLLATE utf8_general_ci NULL,
  `methodList` text CHARACTER SET utf8 COLLATE utf8_general_ci NULL,
  `name` text CHARACTER SET utf8 COLLATE utf8_general_ci NULL
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Table structure for fieldinfo
-- ----------------------------
DROP TABLE IF EXISTS `fieldinfo`;
CREATE TABLE `fieldinfo`  (
  `projectName` text CHARACTER SET utf8 COLLATE utf8_general_ci NULL,
  `fieldname` text CHARACTER SET utf8 COLLATE utf8_general_ci NULL,
  `classname` text CHARACTER SET utf8 COLLATE utf8_general_ci NULL,
  `dataType` text CHARACTER SET utf8 COLLATE utf8_general_ci NULL,
  `modi` text CHARACTER SET utf8 COLLATE utf8_general_ci NULL
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of fieldinfo
-- ----------------------------
INSERT INTO `fieldinfo` VALUES ('MyLuence-master', 'fieldPropertyMap', 'com.wind.myLuence.index.BeanIndex', 'Map<String,FieldLucproperty>', 'private;');
INSERT INTO `fieldinfo` VALUES ('MyLuence-master', 'indexSourceMap', 'com.wind.myLuence.MyLuence', 'Map<String,IndexSource>', 'private;');
INSERT INTO `fieldinfo` VALUES ('MyLuence-master', 'searcherMap', 'com.wind.myLuence.MyLuence', 'Map<String,AbstarctSearcher>', 'private;');
INSERT INTO `fieldinfo` VALUES ('MyLuence-master', 'factory', 'com.wind.myLuence.MyLuence', 'com.wind.myLuence.factory.MyLuenceFactory', 'private;');
INSERT INTO `fieldinfo` VALUES ('MyLuence-master', 'incFieldRW', 'com.wind.myLuence.source.DDALDatabaseSource', 'com.wind.myLuence.source.IncFieldRW', 'private;');
INSERT INTO `fieldinfo` VALUES ('MyLuence-master', 'index', 'com.wind.myLuence.source.IndexSource', 'com.wind.myLuence.Index', 'protected;');

-- ----------------------------
-- Table structure for methodinfo
-- ----------------------------
DROP TABLE IF EXISTS `methodinfo`;
CREATE TABLE `methodinfo`  (
  `projectName` text CHARACTER SET utf8 COLLATE utf8_general_ci NULL,
  `name` text CHARACTER SET utf8 COLLATE utf8_general_ci NULL,
  `javadoc` text CHARACTER SET utf8 COLLATE utf8_general_ci NULL,
  `classname` text CHARACTER SET utf8 COLLATE utf8_general_ci NULL,
  `returnType` text CHARACTER SET utf8 COLLATE utf8_general_ci NULL,
  `modi` text CHARACTER SET utf8 COLLATE utf8_general_ci NULL,
  `throwExceptions` text CHARACTER SET utf8 COLLATE utf8_general_ci NULL,
  `isConstructor` text CHARACTER SET utf8 COLLATE utf8_general_ci NULL,
  `content` text CHARACTER SET utf8 COLLATE utf8_general_ci NULL
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of methodinfo
-- ----------------------------
INSERT INTO `methodinfo` VALUES ('MyLuence-master', 'ConfigItem', NULL, 'com.wind.myLuence.config.CfFileParser', '', 'private;', NULL, '0', 'private void ConfigItem(String value){\n  this.value=value;\n}\n');
INSERT INTO `methodinfo` VALUES ('MyLuence-master', 'parse', NULL, 'com.wind.myLuence.config.CfFileParser', 'Map<String,Context>', 'public;abstract;', NULL, '0', 'public abstract Map<String,Context> parse() throws IOException ;\n');
INSERT INTO `methodinfo` VALUES ('MyLuence-master', 'getFilePath', NULL, 'com.wind.myLuence.config.CfFileParser', 'String', 'public;', NULL, '0', 'public String getFilePath(){\n  return filePath;\n}\n');
INSERT INTO `methodinfo` VALUES ('MyLuence-master', 'setFilePath', NULL, 'com.wind.myLuence.config.CfFileParser', 'void', 'public;', NULL, '0', 'public void setFilePath(String filePath){\n  this.filePath=filePath;\n}\n');
INSERT INTO `methodinfo` VALUES ('MyLuence-master', 'parse', NULL, 'com.wind.myLuence.config.PropertiesCfParser', 'Map<String,Context>', '@Override;public;', NULL, '0', '@Override public Map<String,Context> parse() throws IOException {\n  Properties prop=new Properties();\n  prop.load(PropertyParser.class.getResourceAsStream(this.getFilePath()));\n  Map<String,String> configs=new HashMap<String,String>();\n  Enumeration<?> keys=prop.keys();\n  List<String> cfItemArray=new ArrayList<String>();\n  while (keys.hasMoreElements()) {\n    String key=(String)keys.nextElement();\n    if (key.contains(ConfigItem.BEANCLASS.value)) {\n      cfItemArray.add(key.split(\"\\\\.\")[0]);\n    }\n    String value=(String)prop.get(key);\n    configs.put(key,value);\n  }\n  Map<String,Context> results=new HashMap<String,Context>();\n  for (  String cfItem : cfItemArray) {\n    Context context=new Context();\n    for (    String key : configs.keySet()) {\n      if (key.contains(cfItem)) {\n        context.put(key.split(\"\\\\.\")[1],configs.get(key));\n      }\n    }\n    results.put(cfItem,context);\n  }\n  return results;\n}\n');
INSERT INTO `methodinfo` VALUES ('MyLuence-master', 'parse', NULL, 'com.wind.myLuence.config.XmlCfParser', 'Map<String,Context>', '@Override;public;', NULL, '0', '@Override public Map<String,Context> parse(){\n  return null;\n}\n');
INSERT INTO `methodinfo` VALUES ('MyLuence-master', 'configure', NULL, 'com.wind.myLuence.Configurable', 'void', 'public;', NULL, '0', 'public void configure(Context context) throws ConfigurableException, ClassNotFoundException ;\n');
INSERT INTO `methodinfo` VALUES ('MyLuence-master', 'Context', NULL, 'com.wind.myLuence.Context', '', 'public;', NULL, '1', 'public Context(){\n  parameters=Collections.synchronizedMap(new HashMap<String,String>());\n}\n');
INSERT INTO `methodinfo` VALUES ('MyLuence-master', 'Context', NULL, 'com.wind.myLuence.Context', '', 'public;', NULL, '1', 'public Context(Map<String,String> paramters){\n  this();\n  this.putAll(paramters);\n}\n');
INSERT INTO `methodinfo` VALUES ('MyLuence-master', 'clear', NULL, 'com.wind.myLuence.Context', 'void', 'public;', NULL, '0', 'public void clear(){\n  parameters.clear();\n}\n');
INSERT INTO `methodinfo` VALUES ('MyLuence-master', 'putAll', NULL, 'com.wind.myLuence.Context', 'void', 'public;', NULL, '0', 'public void putAll(Map<String,String> map){\n  parameters.putAll(map);\n}\n');
INSERT INTO `methodinfo` VALUES ('MyLuence-master', 'put', NULL, 'com.wind.myLuence.Context', 'void', 'public;', NULL, '0', 'public void put(String key,String value){\n  parameters.put(key,value);\n}\n');
INSERT INTO `methodinfo` VALUES ('MyLuence-master', 'getBoolean', NULL, 'com.wind.myLuence.Context', 'Boolean', 'public;', NULL, '0', 'public Boolean getBoolean(String key,Boolean defaultValue){\n  String value=get(key);\n  if (value != null) {\n    return Boolean.parseBoolean(value.trim());\n  }\n  return defaultValue;\n}\n');
INSERT INTO `methodinfo` VALUES ('MyLuence-master', 'getBoolean', NULL, 'com.wind.myLuence.Context', 'Boolean', 'public;', NULL, '0', 'public Boolean getBoolean(String key){\n  return getBoolean(key,null);\n}\n');
INSERT INTO `methodinfo` VALUES ('MyLuence-master', 'getInteger', NULL, 'com.wind.myLuence.Context', 'Integer', 'public;', NULL, '0', 'public Integer getInteger(String key,Integer defaultValue){\n  String value=get(key);\n  if (value != null) {\n    return Integer.parseInt(value.trim());\n  }\n  return defaultValue;\n}\n');
INSERT INTO `methodinfo` VALUES ('MyLuence-master', 'get', NULL, 'com.wind.myLuence.Context', 'String', 'private;', NULL, '0', 'private String get(String key,String defaultValue){\n  String result=parameters.get(key);\n  if (result != null) {\n    return result;\n  }\n  return defaultValue;\n}\n');
INSERT INTO `methodinfo` VALUES ('MyLuence-master', 'getInteger', NULL, 'com.wind.myLuence.Context', 'Integer', 'public;', NULL, '0', 'public Integer getInteger(String key){\n  return getInteger(key,null);\n}\n');
INSERT INTO `methodinfo` VALUES ('MyLuence-master', 'getLong', NULL, 'com.wind.myLuence.Context', 'Long', 'public;', NULL, '0', 'public Long getLong(String key,Long defaultValue){\n  String value=get(key);\n  if (value != null) {\n    return Long.parseLong(value.trim());\n  }\n  return defaultValue;\n}\n');
INSERT INTO `methodinfo` VALUES ('MyLuence-master', 'getLong', NULL, 'com.wind.myLuence.Context', 'Long', 'public;', NULL, '0', 'public Long getLong(String key){\n  return getLong(key,null);\n}\n');
INSERT INTO `methodinfo` VALUES ('MyLuence-master', 'getString', NULL, 'com.wind.myLuence.Context', 'String', 'public;', NULL, '0', 'public String getString(String key){\n  return get(key);\n}\n');
INSERT INTO `methodinfo` VALUES ('MyLuence-master', 'getString', NULL, 'com.wind.myLuence.Context', 'String', 'public;', NULL, '0', 'public String getString(String key,String defaultValue){\n  return get(key,defaultValue);\n}\n');
INSERT INTO `methodinfo` VALUES ('MyLuence-master', 'get', NULL, 'com.wind.myLuence.Context', 'String', 'private;', NULL, '0', 'private String get(String key){\n  return get(key,null);\n}\n');
INSERT INTO `methodinfo` VALUES ('MyLuence-master', 'toString', NULL, 'com.wind.myLuence.Context', 'String', 'public;', NULL, '0', 'public String toString(){\n  return \"{ parameters:\" + parameters + \" }\";\n}\n');
INSERT INTO `methodinfo` VALUES ('MyLuence-master', 'InitialDataOpen', NULL, 'com.wind.myLuence.DataSource', 'void', 'public;', NULL, '0', '/** \n * ??????\n */\npublic void InitialDataOpen();\n');
INSERT INTO `methodinfo` VALUES ('MyLuence-master', 'IncreaseDataOpen', NULL, 'com.wind.myLuence.DataSource', 'void', 'public;', NULL, '0', '/** \n * ??????\n */\npublic void IncreaseDataOpen();\n');
INSERT INTO `methodinfo` VALUES ('MyLuence-master', 'ConfigurableException', NULL, 'com.wind.myLuence.exception.ConfigurableException', '', 'public;', NULL, '1', 'public ConfigurableException(){\n}\n');
INSERT INTO `methodinfo` VALUES ('MyLuence-master', 'ConfigurableException', NULL, 'com.wind.myLuence.exception.ConfigurableException', '', 'public;', NULL, '1', 'public ConfigurableException(String message){\n  super(message);\n}\n');
INSERT INTO `methodinfo` VALUES ('MyLuence-master', 'ConfigurableException', NULL, 'com.wind.myLuence.exception.ConfigurableException', '', 'public;', NULL, '1', 'public ConfigurableException(String message,Throwable cause){\n  super(message,cause);\n}\n');
INSERT INTO `methodinfo` VALUES ('MyLuence-master', 'IndexException', NULL, 'com.wind.myLuence.exception.IndexException', '', 'public;', NULL, '1', 'public IndexException(){\n}\n');
INSERT INTO `methodinfo` VALUES ('MyLuence-master', 'IndexException', NULL, 'com.wind.myLuence.exception.IndexException', '', 'public;', NULL, '1', 'public IndexException(String message){\n  super(message);\n}\n');
INSERT INTO `methodinfo` VALUES ('MyLuence-master', 'IndexException', NULL, 'com.wind.myLuence.exception.IndexException', '', 'public;', NULL, '1', 'public IndexException(String message,Throwable cause){\n  super(message,cause);\n}\n');
INSERT INTO `methodinfo` VALUES ('MyLuence-master', 'SearchException', NULL, 'com.wind.myLuence.exception.SearchException', '', 'public;', NULL, '1', 'public SearchException(){\n}\n');
INSERT INTO `methodinfo` VALUES ('MyLuence-master', 'SearchException', NULL, 'com.wind.myLuence.exception.SearchException', '', 'public;', NULL, '1', 'public SearchException(String message){\n  super(message);\n}\n');
INSERT INTO `methodinfo` VALUES ('MyLuence-master', 'SearchException', NULL, 'com.wind.myLuence.exception.SearchException', '', 'public;', NULL, '1', 'public SearchException(String message,Throwable cause){\n  super(message,cause);\n}\n');
INSERT INTO `methodinfo` VALUES ('MyLuence-master', 'getIxSourceInstance', NULL, 'com.wind.myLuence.factory.MyLuenceFactory', 'IndexSource', 'public;', NULL, '0', 'public IndexSource getIxSourceInstance(String name);\n');
INSERT INTO `methodinfo` VALUES ('MyLuence-master', 'getSearcherInstance', NULL, 'com.wind.myLuence.factory.MyLuenceFactory', 'AbstarctSearcher', 'public;', NULL, '0', 'public AbstarctSearcher getSearcherInstance();\n');
INSERT INTO `methodinfo` VALUES ('MyLuence-master', 'XmlMyLuenceFactory', NULL, 'com.wind.myLuence.factory.XmlMyLuenceFactory', '', 'public;', NULL, '1', 'public XmlMyLuenceFactory(String[] xmls){\n  beanFactory=new ClassPathXmlApplicationContext(xmls);\n}\n');
INSERT INTO `methodinfo` VALUES ('MyLuence-master', 'getIxSourceInstance', NULL, 'com.wind.myLuence.factory.XmlMyLuenceFactory', 'IndexSource', '@Override;public;', NULL, '0', '@Override public IndexSource getIxSourceInstance(String name){\n  if (name != null && !name.isEmpty()) {\n    return (IndexSource)beanFactory.getBean(name);\n  }\n  return (IndexSource)beanFactory.getBean(INDEX_SOURCE_NAME);\n}\n');
INSERT INTO `methodinfo` VALUES ('MyLuence-master', 'getSearcherInstance', NULL, 'com.wind.myLuence.factory.XmlMyLuenceFactory', 'AbstarctSearcher', '@Override;public;', NULL, '0', '@Override public AbstarctSearcher getSearcherInstance(){\n  return (AbstarctSearcher)beanFactory.getBean(SEARCHER_NAME);\n}\n');
INSERT INTO `methodinfo` VALUES ('MyLuence-master', 'getAnalyzer', NULL, 'com.wind.myLuence.index.AbstractIndex', 'Analyzer', 'public;', NULL, '0', 'public Analyzer getAnalyzer(){\n  return analyzer;\n}\n');
INSERT INTO `methodinfo` VALUES ('MyLuence-master', 'setAnalyzer', NULL, 'com.wind.myLuence.index.AbstractIndex', 'void', 'public;', NULL, '0', 'public void setAnalyzer(Analyzer analyzer){\n  this.analyzer=analyzer;\n}\n');
INSERT INTO `methodinfo` VALUES ('MyLuence-master', 'configure', NULL, 'com.wind.myLuence.index.BeanIndex', 'void', 'public;', NULL, '0', 'public void configure(Context context) throws ConfigurableException {\n  try {\n    String analyzerClass=context.getString(ANALYZERCLASS);\n    this.analyzer=(Analyzer)Class.forName(analyzerClass).newInstance();\n    List<String> pojoFields=new ArrayList<String>();\n    String className=context.getString(CLASSNAME);\n    try {\n      this.clazz=Class.forName(className);\n      getPojoFileds(pojoFields,clazz);\n    }\n catch (    ClassNotFoundException e1) {\n      logger.error(\"bean class error to create.\");\n      throw new ConfigurableException(e1.getMessage(),e1);\n    }\n    String analyzedIndexFields=context.getString(ANALYZEDINDEXFIELDS);\n    if (analyzedIndexFields != null && !analyzedIndexFields.isEmpty()) {\n      this.analyzedIndexFields=new ArrayList<String>(Arrays.asList(analyzedIndexFields.split(\",\")));\n      if (!pojoFields.containsAll(this.analyzedIndexFields)) {\n        logger.error(\"indexField\'s range beyong the range of pojoFields\");\n        throw new ConfigurableException(\"indexField\'s range beyong the range of pojoFields\");\n      }\n    }\n    String notAnalyzedIndexFields=context.getString(NOTANALYZEDINDEXFIELDS);\n    if (notAnalyzedIndexFields != null && !notAnalyzedIndexFields.isEmpty()) {\n      this.notAnalyzedIndexFields=new ArrayList<String>(Arrays.asList(notAnalyzedIndexFields.split(\",\")));\n      if (!pojoFields.containsAll(this.notAnalyzedIndexFields)) {\n        logger.error(\"notAnalyzedIndexFields\'s range beyong the range of pojoFields\");\n        throw new ConfigurableException(\"notAnalyzedIndexFields\'s range beyong the range of pojoFields\");\n      }\n    }\n    String storeFields=context.getString(STOREFIELDS);\n    if (storeFields != null && !storeFields.isEmpty()) {\n      this.storeFields=new ArrayList<String>(Arrays.asList(storeFields.split(\",\")));\n      if (!pojoFields.containsAll(this.storeFields) && !this.storeFields.contains(DATAFIELDNAME_DEFAULT)) {\n        logger.error(\"storeFields\'s range beyong the range of pojoFields\");\n        throw new ConfigurableException(\"storeFields\'s range beyong the range of pojoFields\");\n      }\n    }\n    if (analyzedIndexFields == null && notAnalyzedIndexFields == null && storeFields == null) {\n      logger.error(\"You must set one of analyzedIndexFields,notAnalyzedIndexFields,storeFields at least.\");\n      throw new ConfigurableException(\"You must set one of analyzedIndexFields,notAnalyzedIndexFields,storeFields at least.\");\n    }\n    String pkFields=context.getString(PK_FIELD);\n    if (pkFields != null && !pkFields.isEmpty()) {\n      this.pkFields=new ArrayList<String>(Arrays.asList(pkFields.split(\",\")));\n    }\n    String indexFilePath=context.getString(INDEXFILEPATH);\n    if (indexFilePath == null || indexFilePath.isEmpty()) {\n      logger.error(\"indexFilePath must to be set.\");\n      throw new ConfigurableException(\"indexFilePath must to be set.\");\n    }\n    try {\n      this.directory=FSDirectory.open(new File(indexFilePath));\n    }\n catch (    IOException e) {\n      logger.error(\"index file dir error to create.\");\n      throw new ConfigurableException(\"index file dir error to create.\");\n    }\n    this.pkName=context.getString(PKNAME,PKNAME_DEFAULT);\n    this.dataFieldName=context.getString(DATAFIELDNAME,DATAFIELDNAME_DEFAULT);\n    fieldPropertyMap=getFieldLucProperty();\n  }\n catch (  InstantiationException e2) {\n    Log.error(this.getClass(),e2.getMessage());\n    throw new ConfigurableException(e2.getMessage(),e2);\n  }\ncatch (  IllegalAccessException e2) {\n    Log.error(this.getClass(),e2.getMessage());\n    throw new ConfigurableException(e2.getMessage(),e2);\n  }\ncatch (  ClassNotFoundException e2) {\n    Log.error(this.getClass(),e2.getMessage());\n    throw new ConfigurableException(e2.getMessage(),e2);\n  }\n}\n');
INSERT INTO `methodinfo` VALUES ('MyLuence-master', 'write', NULL, 'com.wind.myLuence.index.BeanIndex', 'void', 'public;', NULL, '0', 'public void write(List<Object> datas) throws IndexException {\n  Log.info(BeanIndex.class,\"#################### createIndex  starting\");\n  long start=System.currentTimeMillis();\n  if (datas == null || datas.isEmpty())   return;\n  IndexWriter indexWriter=null;\n  try {\n    while (!IndexWriter.isLocked(directory)) {\n      IndexWriterConfig indexWriterConfig=new IndexWriterConfig(Version.LUCENE_8,analyzer);\n      indexWriter=new IndexWriter(directory,indexWriterConfig);\n      indexWriter.deleteAll();\n      indexWriter.forceMergeDeletes();\n      indexWriter.commit();\n      for (      Object data : datas) {\n        if (data == null)         continue;\n        Document doc=new Document();\n        if (this.pkFields != null) {\n          List<String> pkFieldValueList=new ArrayList<String>();\n          for (          String pkField : pkFields) {\n            pkFieldValueList.add(getFieldValue(clazz,pkField,data));\n          }\n          StringBuilder id=new StringBuilder();\n          for (          String pkFieldValue : pkFieldValueList) {\n            id.append(pkFieldValue + \"@\");\n          }\n          FieldType fieldType=new FieldType();\n          fieldType.setStored(true);\n          fieldType.setIndexed(false);\n          fieldType.setTokenized(false);\n          doc.add(new Field(pkName,id.substring(0,id.length() - 1),fieldType));\n        }\n        for (        String fieldName : fieldPropertyMap.keySet()) {\n          String value=null;\n          if (fieldName.equalsIgnoreCase(dataFieldName)) {\n            value=JSONObject.fromObject(data,config).toString();\n          }\n else {\n            value=getFieldValue(clazz,fieldName,data);\n          }\n          if (value != null) {\n            FieldType fieldType=new FieldType();\n            FieldLucproperty fieldLucproperty=fieldPropertyMap.get(fieldName);\n            fieldType.setStored(fieldLucproperty.isStore());\n            fieldType.setIndexed(fieldLucproperty.isIndex());\n            fieldType.setTokenized(fieldLucproperty.isAnalyzed());\n            Field field=new Field(fieldName,value,fieldType);\n            doc.add(field);\n          }\n        }\n        indexWriter.addDocument(doc);\n      }\n      indexWriter.commit();\n      break;\n    }\n  }\n catch (  Exception e) {\n    Log.error(BeanIndex.class,e,\"###############create index happened error\" + e.getMessage());\n  }\n finally {\n    if (indexWriter != null) {\n      try {\n        indexWriter.close();\n        IndexWriter.unlock(directory);\n      }\n catch (      IOException e) {\n        Log.error(this.getClass(),e);\n      }\n      indexWriter=null;\n    }\n  }\n  Log.warn(BeanIndex.class,\"#################### createIndex  finished, this process spent \" + (System.currentTimeMillis() - start) / 1000 + \" seconds\");\n}\n');
INSERT INTO `methodinfo` VALUES ('MyLuence-master', 'append', NULL, 'com.wind.myLuence.index.BeanIndex', 'void', '@Override;public;', NULL, '0', '@Override public void append(List<Object> datas) throws IndexException {\n  Log.info(BeanIndex.class,\"#################### append index  starting\");\n  if (datas == null || datas.isEmpty())   return;\n  long start=System.currentTimeMillis();\n  IndexWriter indexWriter=null;\n  try {\n    while (!IndexWriter.isLocked(directory)) {\n      IndexWriterConfig indexWriterConfig=new IndexWriterConfig(Version.LUCENE_46,analyzer);\n      indexWriter=new IndexWriter(directory,indexWriterConfig);\n      for (      Object data : datas) {\n        if (data == null)         continue;\n        Document doc=new Document();\n        if (this.pkFields != null) {\n          List<String> pkFieldValueList=new ArrayList<String>();\n          for (          String pkField : pkFields) {\n            pkFieldValueList.add(getFieldValue(clazz,pkField,data));\n          }\n          StringBuilder id=new StringBuilder();\n          for (          String pkFieldValue : pkFieldValueList) {\n            id.append(pkFieldValue + \"@\");\n          }\n          FieldType fieldType=new FieldType();\n          fieldType.setStored(true);\n          fieldType.setIndexed(false);\n          fieldType.setTokenized(false);\n          doc.add(new Field(pkName,id.substring(0,id.length() - 1),fieldType));\n        }\n        for (        String fieldName : fieldPropertyMap.keySet()) {\n          String value=null;\n          if (fieldName.equalsIgnoreCase(dataFieldName)) {\n            value=JSONObject.fromObject(data,config).toString();\n          }\n else {\n            value=getFieldValue(clazz,fieldName,data);\n          }\n          if (value != null) {\n            FieldType fieldType=new FieldType();\n            FieldLucproperty fieldLucproperty=fieldPropertyMap.get(fieldName);\n            fieldType.setStored(fieldLucproperty.isStore());\n            fieldType.setIndexed(fieldLucproperty.isIndex());\n            fieldType.setTokenized(fieldLucproperty.isAnalyzed());\n            Field field=new Field(fieldName,value,fieldType);\n            doc.add(field);\n          }\n        }\n        indexWriter.addDocument(doc);\n      }\n      indexWriter.forceMerge(50);\n      indexWriter.commit();\n      break;\n    }\n  }\n catch (  Exception e) {\n    Log.error(BeanIndex.class,e,\"###############append index happened error\" + e.getMessage());\n  }\n finally {\n    if (indexWriter != null) {\n      try {\n        indexWriter.close();\n        IndexWriter.unlock(directory);\n      }\n catch (      IOException e) {\n        Log.error(this.getClass(),e);\n      }\n      indexWriter=null;\n    }\n  }\n  Log.warn(BeanIndex.class,\"#################### append index  finished, this process spent \" + (System.currentTimeMillis() - start) / 1000 + \" seconds\");\n}\n');
INSERT INTO `methodinfo` VALUES ('MyLuence-master', 'remove', NULL, 'com.wind.myLuence.index.BeanIndex', 'void', '@Override;public;', NULL, '0', '@Override public void remove() throws IndexException {\n}\n');
INSERT INTO `methodinfo` VALUES ('MyLuence-master', 'getFieldValue', NULL, 'com.wind.myLuence.index.BeanIndex', 'String', 'private;', NULL, '0', '/** \n * ?????\n * @param clazzClass????\n * @param fieldName????\n * @param data????\n * @return ??????\n * @throws Exception\n */\nprivate String getFieldValue(Class<?> clazz,String fieldName,Object data) throws Exception {\n  String value=null;\n  Method m=clazz.getMethod(\"get\" + fieldName.substring(0,1).toUpperCase() + fieldName.substring(1));\n  String returnValueType=m.getReturnType().getSimpleName();\n  Object mValue=m.invoke(data);\n  if (mValue != null) {\n    if (\"String\".equals(returnValueType) || \"Integer\".equals(returnValueType) || \"Long\".equals(returnValueType)|| \"Double\".equals(returnValueType)|| \"Float\".equals(returnValueType)|| \"Boolean\".equals(returnValueType)|| \"Short\".equalsIgnoreCase(returnValueType)) {\n      value=mValue.toString();\n    }\n else     if (\"Date\".equals(returnValueType)) {\n      value=DateUtil.timeFormat((Date)mValue);\n    }\n else     if (\"Timestamp\".equals(returnValueType)) {\n      value=DateUtil.timeFormat((Timestamp)mValue);\n    }\n else     if (\"HashMap\".equals(returnValueType)) {\n      value=JSONObject.fromObject(mValue,config).toString();\n    }\n else     if (\"ArrayList\".equals(returnValueType)) {\n      value=JSONArray.fromObject(mValue,config).toString();\n    }\n else {\n      value=getFieldValue(m.getReturnType(),fieldName,mValue);\n    }\n  }\n  return value;\n}\n');
INSERT INTO `methodinfo` VALUES ('MyLuence-master', 'getPojoFileds', NULL, 'com.wind.myLuence.index.BeanIndex', 'void', 'private;', NULL, '0', '/** \n * ??????????\n * @param fields\n * @param clazz\n */\nprivate void getPojoFileds(List<String> fields,Class<?> clazz){\n  Method[] methods=clazz.getDeclaredMethods();\n  for (  Method m : methods) {\n    String name=m.getName();\n    if (name.startsWith(\"get\")) {\n      String returnValueType=m.getReturnType().getSimpleName();\n      if (\"String\".equals(returnValueType) || \"Integer\".equals(returnValueType) || \"Long\".equals(returnValueType)|| \"Double\".equals(returnValueType)|| \"Float\".equals(returnValueType)|| \"Boolean\".equals(returnValueType)|| \"Short\".equalsIgnoreCase(returnValueType)|| \"Date\".equals(returnValueType)|| \"Timestamp\".equals(returnValueType)|| \"HashMap\".equals(returnValueType)|| \"ArrayList\".equals(returnValueType)) {\n        name=name.substring(3,4).toLowerCase() + name.substring(4);\n      }\n else {\n        getPojoFileds(fields,m.getReturnType());\n      }\n      fields.add(name);\n    }\n  }\n}\n');
INSERT INTO `methodinfo` VALUES ('MyLuence-master', 'getFieldLucProperty', NULL, 'com.wind.myLuence.index.BeanIndex', 'Map<String,FieldLucproperty>', 'private;', NULL, '0', '/** \n * ?????????\n * @return\n */\nprivate Map<String,FieldLucproperty> getFieldLucProperty(){\n  Map<String,FieldLucproperty> fieldPropertyMap=new HashMap<String,FieldLucproperty>();\n  if (analyzedIndexFields != null) {\n    for (    String analyzedIndexField : analyzedIndexFields) {\n      FieldLucproperty fieldLucproperty=new FieldLucproperty();\n      fieldLucproperty.setFieldName(analyzedIndexField);\n      fieldLucproperty.setAnalyzed(true);\n      fieldLucproperty.setStore(false);\n      fieldLucproperty.setIndex(true);\n      fieldPropertyMap.put(analyzedIndexField,fieldLucproperty);\n    }\n  }\n  if (notAnalyzedIndexFields != null) {\n    for (    String notAnalyzedIndexField : notAnalyzedIndexFields) {\n      FieldLucproperty fieldLucproperty=new FieldLucproperty();\n      fieldLucproperty.setFieldName(notAnalyzedIndexField);\n      fieldLucproperty.setIndex(true);\n      fieldLucproperty.setAnalyzed(false);\n      fieldLucproperty.setStore(false);\n      fieldPropertyMap.put(notAnalyzedIndexField,fieldLucproperty);\n    }\n  }\n  if (storeFields != null) {\n    for (    String storeField : storeFields) {\n      if (fieldPropertyMap.containsKey(storeField)) {\n        FieldLucproperty fieldLucproperty=fieldPropertyMap.get(storeField);\n        fieldLucproperty.setStore(true);\n      }\n else {\n        FieldLucproperty fieldLucproperty=new FieldLucproperty();\n        fieldLucproperty.setFieldName(storeField);\n        fieldLucproperty.setIndex(false);\n        fieldLucproperty.setAnalyzed(false);\n        fieldLucproperty.setStore(true);\n        fieldPropertyMap.put(storeField,fieldLucproperty);\n      }\n    }\n  }\n  return fieldPropertyMap;\n}\n');
INSERT INTO `methodinfo` VALUES ('MyLuence-master', 'DateJsonValueProcessor', NULL, 'com.wind.myLuence.index.DateJsonValueProcessor', '', 'public;', NULL, '1', 'public DateJsonValueProcessor(String format){\n  this.format=format;\n}\n');
INSERT INTO `methodinfo` VALUES ('MyLuence-master', 'processArrayValue', NULL, 'com.wind.myLuence.index.DateJsonValueProcessor', 'Object', '@Override;public;', NULL, '0', '@Override public Object processArrayValue(Object arg0,JsonConfig arg1){\n  return processObjectValue(null,arg0,arg1);\n}\n');
INSERT INTO `methodinfo` VALUES ('MyLuence-master', 'processObjectValue', NULL, 'com.wind.myLuence.index.DateJsonValueProcessor', 'Object', '@Override;public;', NULL, '0', '@Override public Object processObjectValue(String key,Object value,JsonConfig arg2){\n  if (value == null) {\n    return \"\";\n  }\n  if (value instanceof java.sql.Timestamp) {\n    String str=new SimpleDateFormat(format).format((java.sql.Timestamp)value);\n    return str;\n  }\n  if (value instanceof java.util.Date) {\n    String str=new SimpleDateFormat(format).format((java.util.Date)value);\n    return str;\n  }\n  return value.toString();\n}\n');
INSERT INTO `methodinfo` VALUES ('MyLuence-master', 'write', NULL, 'com.wind.myLuence.Index', 'void', 'public;', NULL, '0', 'public void write(List<Object> datas) throws IndexException ;\n');
INSERT INTO `methodinfo` VALUES ('MyLuence-master', 'append', NULL, 'com.wind.myLuence.Index', 'void', 'public;', NULL, '0', 'public void append(List<Object> datas) throws IndexException ;\n');
INSERT INTO `methodinfo` VALUES ('MyLuence-master', 'remove', NULL, 'com.wind.myLuence.Index', 'void', 'public;', NULL, '0', 'public void remove() throws IndexException ;\n');
INSERT INTO `methodinfo` VALUES ('MyLuence-master', 'FieldLucproperty', NULL, 'com.wind.myLuence.FieldLucproperty', '', 'public;', NULL, '1', 'public FieldLucproperty(){\n}\n');
INSERT INTO `methodinfo` VALUES ('MyLuence-master', 'getFieldName', NULL, 'com.wind.myLuence.FieldLucproperty', 'String', 'public;', NULL, '0', 'public String getFieldName(){\n  return fieldName;\n}\n');
INSERT INTO `methodinfo` VALUES ('MyLuence-master', 'setFieldName', NULL, 'com.wind.myLuence.FieldLucproperty', 'void', 'public;', NULL, '0', 'public void setFieldName(String fieldName){\n  this.fieldName=fieldName;\n}\n');
INSERT INTO `methodinfo` VALUES ('MyLuence-master', 'isStore', NULL, 'com.wind.myLuence.FieldLucproperty', 'boolean', 'public;', NULL, '0', 'public boolean isStore(){\n  return isStore;\n}\n');
INSERT INTO `methodinfo` VALUES ('MyLuence-master', 'setStore', NULL, 'com.wind.myLuence.FieldLucproperty', 'void', 'public;', NULL, '0', 'public void setStore(boolean isStore){\n  this.isStore=isStore;\n}\n');
INSERT INTO `methodinfo` VALUES ('MyLuence-master', 'isIndex', NULL, 'com.wind.myLuence.FieldLucproperty', 'boolean', 'public;', NULL, '0', 'public boolean isIndex(){\n  return isIndex;\n}\n');
INSERT INTO `methodinfo` VALUES ('MyLuence-master', 'setIndex', NULL, 'com.wind.myLuence.FieldLucproperty', 'void', 'public;', NULL, '0', 'public void setIndex(boolean isIndex){\n  this.isIndex=isIndex;\n}\n');
INSERT INTO `methodinfo` VALUES ('MyLuence-master', 'isAnalyzed', NULL, 'com.wind.myLuence.FieldLucproperty', 'boolean', 'public;', NULL, '0', 'public boolean isAnalyzed(){\n  return isAnalyzed;\n}\n');
INSERT INTO `methodinfo` VALUES ('MyLuence-master', 'setAnalyzed', NULL, 'com.wind.myLuence.FieldLucproperty', 'void', 'public;', NULL, '0', 'public void setAnalyzed(boolean isAnalyzed){\n  this.isAnalyzed=isAnalyzed;\n}\n');
INSERT INTO `methodinfo` VALUES ('MyLuence-master', 'init', NULL, 'com.wind.myLuence.MyLuence', 'void', 'public;', NULL, '0', 'public void init() throws IOException, ClassNotFoundException, ConfigurableException {\n  indexSourceMap=new HashMap<String,IndexSource>();\n  searcherMap=new HashMap<String,AbstarctSearcher>();\n  CfFileParser cfFileParser=null;\n  if (configPath.contains(\".properties\")) {\n    cfFileParser=new PropertiesCfParser();\n  }\n else   if (configPath.contains(\".xml\")) {\n    cfFileParser=new XmlCfParser();\n  }\n  cfFileParser.setFilePath(configPath);\n  Map<String,Context> cfContextMap=cfFileParser.parse();\n  itemList.addAll(cfContextMap.keySet());\n  for (  String cfContextKey : cfContextMap.keySet()) {\n    Context context=cfContextMap.get(cfContextKey);\n    IndexSource indexSource=factory.getIxSourceInstance(context.getString(CfFileParser.ConfigItem.INDEXSOURCE.value));\n    indexSource.configure(context);\n    indexSourceMap.put(cfContextKey,indexSource);\n    AbstarctSearcher searcher=factory.getSearcherInstance();\n    searcher.configure(context);\n    searcherMap.put(cfContextKey,searcher);\n  }\n}\n');
INSERT INTO `methodinfo` VALUES ('MyLuence-master', 'writeIndex', NULL, 'com.wind.myLuence.MyLuence', 'void', 'public;', NULL, '0', 'public void writeIndex(){\n  for (  String iSourceKey : indexSourceMap.keySet()) {\n    indexSourceMap.get(iSourceKey).InitialDataOpen();\n  }\n}\n');
INSERT INTO `methodinfo` VALUES ('MyLuence-master', 'writeIndex', NULL, 'com.wind.myLuence.MyLuence', 'void', 'public;', NULL, '0', 'public void writeIndex(String item) throws IndexException {\n  if (!itemList.contains(item)) {\n    throw new IndexException(\"item doesn\'t exist.\");\n  }\n  indexSourceMap.get(item).InitialDataOpen();\n}\n');
INSERT INTO `methodinfo` VALUES ('MyLuence-master', 'appendIndex', NULL, 'com.wind.myLuence.MyLuence', 'void', 'public;', NULL, '0', 'public void appendIndex(){\n  for (  String iSourceKey : indexSourceMap.keySet()) {\n    indexSourceMap.get(iSourceKey).IncreaseDataOpen();\n  }\n}\n');
INSERT INTO `methodinfo` VALUES ('MyLuence-master', 'appendIndex', NULL, 'com.wind.myLuence.MyLuence', 'void', 'public;', NULL, '0', 'public void appendIndex(String item) throws IndexException {\n  if (!itemList.contains(item)) {\n    throw new IndexException(\"item doesn\'t exist.\");\n  }\n  indexSourceMap.get(item).IncreaseDataOpen();\n}\n');
INSERT INTO `methodinfo` VALUES ('MyLuence-master', 'search', NULL, 'com.wind.myLuence.MyLuence', 'List<T>', 'public;', NULL, '0', 'public <T>List<T> search(String item,String queryStr,Sort sort,int num) throws SearchException {\n  if (!itemList.contains(item)) {\n    throw new SearchException(\"item doesn\'t exist.\");\n  }\n  return searcherMap.get(item).search(queryStr,sort,num);\n}\n');
INSERT INTO `methodinfo` VALUES ('MyLuence-master', 'search', NULL, 'com.wind.myLuence.MyLuence', 'List<T>', 'public;', NULL, '0', 'public <T>List<T> search(String item,String[] queryStr,Sort sort,int num) throws SearchException {\n  if (!itemList.contains(item)) {\n    throw new SearchException(\"item doesn\'t exist.\");\n  }\n  return searcherMap.get(item).search(queryStr,sort,num);\n}\n');
INSERT INTO `methodinfo` VALUES ('MyLuence-master', 'search', NULL, 'com.wind.myLuence.MyLuence', 'List<T>', 'public;', NULL, '0', 'public <T>List<T> search(String item,String queryStr,Sort sort,int pageSize,int curPage) throws SearchException {\n  if (!itemList.contains(item)) {\n    throw new SearchException(\"item doesn\'t exist.\");\n  }\n  return searcherMap.get(item).search(queryStr,sort,pageSize,curPage);\n}\n');
INSERT INTO `methodinfo` VALUES ('MyLuence-master', 'Exactsearch', NULL, 'com.wind.myLuence.MyLuence', 'List<T>', 'public;', NULL, '0', 'public <T>List<T> Exactsearch(String item,Map<String,List<String>> searchTermMap,Sort sort,int num) throws SearchException {\n  if (!itemList.contains(item)) {\n    throw new SearchException(\"item doesn\'t exist.\");\n  }\n  return searcherMap.get(item).Exactsearch(searchTermMap,sort,1);\n}\n');
INSERT INTO `methodinfo` VALUES ('MyLuence-master', 'search', NULL, 'com.wind.myLuence.MyLuence', 'List<T>', 'public;', NULL, '0', 'public <T>List<T> search(String item,String[] queryStr,Sort sort,int pageSize,int curPage) throws SearchException {\n  if (!itemList.contains(item)) {\n    throw new SearchException(\"item doesn\'t exist.\");\n  }\n  return searcherMap.get(item).search(queryStr,sort,pageSize,curPage);\n}\n');
INSERT INTO `methodinfo` VALUES ('MyLuence-master', 'getConfigPath', NULL, 'com.wind.myLuence.MyLuence', 'String', 'public;', NULL, '0', 'public String getConfigPath(){\n  return configPath;\n}\n');
INSERT INTO `methodinfo` VALUES ('MyLuence-master', 'setConfigPath', NULL, 'com.wind.myLuence.MyLuence', 'void', 'public;', NULL, '0', 'public void setConfigPath(String configPath){\n  this.configPath=configPath;\n}\n');
INSERT INTO `methodinfo` VALUES ('MyLuence-master', 'getFactory', NULL, 'com.wind.myLuence.MyLuence', 'MyLuenceFactory', 'public;', NULL, '0', 'public MyLuenceFactory getFactory(){\n  return factory;\n}\n');
INSERT INTO `methodinfo` VALUES ('MyLuence-master', 'setFactory', NULL, 'com.wind.myLuence.MyLuence', 'void', 'public;', NULL, '0', 'public void setFactory(MyLuenceFactory factory){\n  this.factory=factory;\n}\n');
INSERT INTO `methodinfo` VALUES ('MyLuence-master', 'parse', NULL, 'com.wind.myLuence.PropertyParser', 'Map<String,String>', 'public;static;', NULL, '0', 'public static Map<String,String> parse(String filePath) throws IOException {\n  Properties prop=new Properties();\n  prop.load(PropertyParser.class.getResourceAsStream(filePath));\n  Map<String,String> configs=new HashMap<String,String>();\n  Enumeration<?> keys=prop.keys();\n  while (keys.hasMoreElements()) {\n    String key=(String)keys.nextElement();\n    String value=(String)prop.get(key);\n    configs.put(key,value);\n  }\n  return configs;\n}\n');
INSERT INTO `methodinfo` VALUES ('MyLuence-master', 'main', NULL, 'com.wind.myLuence.PropertyParser', 'void', 'public;static;', NULL, '0', 'public static void main(String[] args){\n  try {\n    Map<String,String> map=PropertyParser.parse(\"/data/lucence_strategy.properties\");\n    for (    String key : map.keySet()) {\n      System.out.println(key + \"@\" + map.get(key));\n    }\n  }\n catch (  IOException e) {\n    e.printStackTrace();\n  }\n}\n');
INSERT INTO `methodinfo` VALUES ('MyLuence-master', 'search', NULL, 'com.wind.myLuence.search.AbstarctSearcher', 'List<T>', 'public;abstract;', NULL, '0', 'public abstract <T>List<T> search(String queryStr,Sort sort,int num);\n');
INSERT INTO `methodinfo` VALUES ('MyLuence-master', 'search', NULL, 'com.wind.myLuence.search.AbstarctSearcher', 'List<T>', 'public;abstract;', NULL, '0', 'public abstract <T>List<T> search(String queryStr,Sort sort,int pageSize,int curPage);\n');
INSERT INTO `methodinfo` VALUES ('MyLuence-master', 'search', NULL, 'com.wind.myLuence.search.AbstarctSearcher', 'List<T>', 'public;abstract;', NULL, '0', 'public abstract <T>List<T> search(String[] queryStr,Sort sort,int pageSize,int curPage);\n');
INSERT INTO `methodinfo` VALUES ('MyLuence-master', 'search', NULL, 'com.wind.myLuence.search.AbstarctSearcher', 'List<T>', 'public;abstract;', NULL, '0', 'public abstract <T>List<T> search(String[] queryStrs,Sort sort,int num);\n');
INSERT INTO `methodinfo` VALUES ('MyLuence-master', 'Exactsearch', NULL, 'com.wind.myLuence.search.AbstarctSearcher', 'List<T>', 'public;abstract;', NULL, '0', 'public abstract <T>List<T> Exactsearch(Map<String,List<String>> searchTermMap,Sort sort,int num);\n');
INSERT INTO `methodinfo` VALUES ('MyLuence-master', 'getAnalyzer', NULL, 'com.wind.myLuence.search.AbstarctSearcher', 'Analyzer', 'public;', NULL, '0', 'public Analyzer getAnalyzer(){\n  return analyzer;\n}\n');
INSERT INTO `methodinfo` VALUES ('MyLuence-master', 'setAnalyzer', NULL, 'com.wind.myLuence.search.AbstarctSearcher', 'void', 'public;', NULL, '0', 'public void setAnalyzer(Analyzer analyzer){\n  this.analyzer=analyzer;\n}\n');
INSERT INTO `methodinfo` VALUES ('MyLuence-master', 'search', NULL, 'com.wind.myLuence.search.BeanSearcher', 'List<T>', '@SuppressWarnings(\"unchecked\");@Override;public;', NULL, '0', '@SuppressWarnings(\"unchecked\") @Override public <T>List<T> search(String queryStr,Sort sort,int num){\n  List<T> results=new ArrayList<T>();\n  try {\n    IndexSearcher searcher=new IndexSearcher(DirectoryReader.open(directory));\n    MultiFieldQueryParser parser=new MultiFieldQueryParser(Version.LUCENE_46,analyzedIndexKeys.toArray(new String[]{}),analyzer);\n    Query q=parser.parse(queryStr);\n    TopDocs topDocs=searcher.search(q,num);\n    ScoreDoc[] dosList=topDocs.scoreDocs;\n    for (int i=0; i < dosList.length; i++) {\n      Document doc=searcher.doc(dosList[i].doc);\n      if (hasDataKey) {\n        String objJson=doc.get(DATAFIELDNAME_DEFAULT);\n        T t=(T)JSONObject.toBean(JSONObject.fromObject(objJson),clazz);\n        results.add(t);\n      }\n else {\n        T t=(T)clazz.newInstance();\n        for (        String storeKey : storeKeys) {\n          String value=doc.get(storeKey);\n          Map<String,String> fieldNameTypes=getFieldNameType(clazz);\n          setFieldValue(clazz,storeKey,value,fieldNameTypes.get(storeKey),t);\n        }\n        results.add(t);\n      }\n    }\n  }\n catch (  ParseException e) {\n    logger.error(e.getMessage(),e);\n  }\ncatch (  IOException e) {\n    logger.error(e.getMessage(),e);\n  }\ncatch (  Exception e) {\n    logger.error(e.getMessage(),e);\n  }\n  return results;\n}\n');
INSERT INTO `methodinfo` VALUES ('MyLuence-master', 'search', NULL, 'com.wind.myLuence.search.BeanSearcher', 'List<T>', '@SuppressWarnings(\"unchecked\");@Override;public;', NULL, '0', '@SuppressWarnings(\"unchecked\") @Override public <T>List<T> search(String[] queryStrs,Sort sort,int num){\n  List<T> results=new ArrayList<T>();\n  try {\n    IndexSearcher searcher=new IndexSearcher(DirectoryReader.open(directory));\n    MultiFieldQueryParser parser=new MultiFieldQueryParser(Version.LUCENE_46,analyzedIndexKeys.toArray(new String[]{}),analyzer);\n    for (    String queryStr : queryStrs) {\n      Query q=parser.parse(queryStr);\n      TopDocs topDocs=searcher.search(q,num);\n      ScoreDoc[] dosList=topDocs.scoreDocs;\n      for (int i=0; i < dosList.length; i++) {\n        Document doc=searcher.doc(dosList[i].doc);\n        if (hasDataKey) {\n          String objJson=doc.get(DATAFIELDNAME_DEFAULT);\n          T t=(T)JSONObject.toBean(JSONObject.fromObject(objJson),clazz);\n          results.add(t);\n        }\n else {\n          T t=(T)clazz.newInstance();\n          for (          String storeKey : storeKeys) {\n            String value=doc.get(storeKey);\n            Map<String,String> fieldNameTypes=getFieldNameType(clazz);\n            setFieldValue(clazz,storeKey,value,fieldNameTypes.get(storeKey),t);\n          }\n          results.add(t);\n        }\n      }\n    }\n  }\n catch (  ParseException e) {\n    logger.error(e.getMessage(),e);\n  }\ncatch (  IOException e) {\n    logger.error(e.getMessage(),e);\n  }\ncatch (  Exception e) {\n    logger.error(e.getMessage(),e);\n  }\n  return results;\n}\n');
INSERT INTO `methodinfo` VALUES ('MyLuence-master', 'search', NULL, 'com.wind.myLuence.search.BeanSearcher', 'List<T>', '@SuppressWarnings(\"unchecked\");@Override;public;', NULL, '0', '@SuppressWarnings(\"unchecked\") @Override public <T>List<T> search(String queryStr,Sort sort,int pageSize,int curPage){\n  List<T> results=new ArrayList<T>();\n  try {\n    IndexSearcher searcher=new IndexSearcher(DirectoryReader.open(directory));\n    MultiFieldQueryParser parser=new MultiFieldQueryParser(Version.LUCENE_46,analyzedIndexKeys.toArray(new String[]{}),analyzer);\n    Query q=parser.parse(queryStr);\n    TopDocs topDocs=searcher.search(q,3000);\n    ScoreDoc[] dosList=topDocs.scoreDocs;\n    int begin=pageSize * (curPage - 1);\n    int end=Math.min(begin + pageSize,dosList.length);\n    for (int i=begin; i < end; i++) {\n      Document doc=searcher.doc(dosList[i].doc);\n      if (hasDataKey) {\n        String objJson=doc.get(DATAFIELDNAME_DEFAULT);\n        T t=(T)JSONObject.toBean(JSONObject.fromObject(objJson),clazz);\n        results.add(t);\n      }\n else {\n        T t=(T)clazz.newInstance();\n        for (        String storeKey : storeKeys) {\n          String value=doc.get(storeKey);\n          Map<String,String> fieldNameTypes=getFieldNameType(clazz);\n          setFieldValue(clazz,storeKey,value,fieldNameTypes.get(storeKey),t);\n        }\n        results.add(t);\n      }\n    }\n  }\n catch (  ParseException e) {\n    logger.error(e.getMessage(),e);\n  }\ncatch (  IOException e) {\n    logger.error(e.getMessage(),e);\n  }\ncatch (  Exception e) {\n    logger.error(e.getMessage(),e);\n  }\n  return results;\n}\n');
INSERT INTO `methodinfo` VALUES ('MyLuence-master', 'search', NULL, 'com.wind.myLuence.search.BeanSearcher', 'List<T>', '@SuppressWarnings(\"unchecked\");@Override;public;', NULL, '0', '@SuppressWarnings(\"unchecked\") @Override public <T>List<T> search(String[] queryStr,Sort sort,int pageSize,int curPage){\n  List<T> results=new ArrayList<T>();\n  try {\n    IndexSearcher searcher=new IndexSearcher(DirectoryReader.open(directory));\n    BooleanQuery Bquery=new BooleanQuery();\n    MultiFieldQueryParser parser=new MultiFieldQueryParser(Version.LUCENE_46,analyzedIndexKeys.toArray(new String[]{}),analyzer);\n    for (int i=0; i < queryStr.length; i++) {\n      Query query=parser.parse(queryStr[i]);\n      Bquery.add(query,BooleanClause.Occur.SHOULD);\n    }\n    TopDocs topDocs=searcher.search(Bquery,3000);\n    ScoreDoc[] dosList=topDocs.scoreDocs;\n    int begin=pageSize * (curPage - 1);\n    int end=Math.min(begin + pageSize,dosList.length);\n    for (int i=begin; i < end; i++) {\n      Document doc=searcher.doc(dosList[i].doc);\n      if (hasDataKey) {\n        String objJson=doc.get(DATAFIELDNAME_DEFAULT);\n        T t=(T)JSONObject.toBean(JSONObject.fromObject(objJson),clazz);\n        results.add(t);\n      }\n else {\n        T t=(T)clazz.newInstance();\n        for (        String storeKey : storeKeys) {\n          String value=doc.get(storeKey);\n          Map<String,String> fieldNameTypes=getFieldNameType(clazz);\n          setFieldValue(clazz,storeKey,value,fieldNameTypes.get(storeKey),t);\n        }\n        results.add(t);\n      }\n    }\n  }\n catch (  ParseException e) {\n    logger.error(e.getMessage(),e);\n  }\ncatch (  Exception e) {\n    logger.error(e.getMessage(),e);\n  }\n  return results;\n}\n');
INSERT INTO `methodinfo` VALUES ('MyLuence-master', 'Exactsearch', NULL, 'com.wind.myLuence.search.BeanSearcher', 'List<T>', '@SuppressWarnings(\"unchecked\");@Override;public;', NULL, '0', '@SuppressWarnings(\"unchecked\") @Override public <T>List<T> Exactsearch(Map<String,List<String>> searchTermMap,Sort sort,int num){\n  List<T> results=new ArrayList<T>();\n  try {\n    if (!notAnalyzedIndexKeys.containsAll(searchTermMap.keySet())) {\n      throw new SearchException(\"search key collection don\'t exist.\");\n    }\n    IndexSearcher searcher=new IndexSearcher(DirectoryReader.open(directory));\n    for (    String searchKey : searchTermMap.keySet()) {\n      List<String> searchTermList=searchTermMap.get(searchKey);\n      for (      String searchTerm : searchTermList) {\n        Query query=new TermQuery(new Term(searchKey,searchTerm));\n        TopDocs topDocs=searcher.search(query,num);\n        ScoreDoc[] dosList=topDocs.scoreDocs;\n        for (int i=0; i < dosList.length; i++) {\n          Document doc=searcher.doc(dosList[i].doc);\n          if (hasDataKey) {\n            String objJson=doc.get(DATAFIELDNAME_DEFAULT);\n            T t=(T)JSONObject.toBean(JSONObject.fromObject(objJson),clazz);\n            results.add(t);\n          }\n else {\n            T t=(T)clazz.newInstance();\n            for (            String storeKey : storeKeys) {\n              String value=doc.get(storeKey);\n              Map<String,String> fieldNameTypes=getFieldNameType(clazz);\n              setFieldValue(clazz,storeKey,value,fieldNameTypes.get(storeKey),t);\n            }\n            results.add(t);\n          }\n        }\n      }\n    }\n  }\n catch (  ParseException e) {\n    logger.error(e.getMessage(),e);\n  }\ncatch (  Exception e) {\n    logger.error(e.getMessage(),e);\n  }\n  return results;\n}\n');
INSERT INTO `methodinfo` VALUES ('MyLuence-master', 'configure', NULL, 'com.wind.myLuence.search.BeanSearcher', 'void', 'public;', NULL, '0', 'public void configure(Context context) throws ConfigurableException {\n  try {\n    String analyzerClass=context.getString(ANALYZERCLASS);\n    this.analyzer=(Analyzer)Class.forName(analyzerClass).newInstance();\n    List<String> pojoFields=new ArrayList<String>();\n    String className=context.getString(CLASSNAME);\n    try {\n      this.clazz=Class.forName(className);\n      getPojoFileds(pojoFields,clazz);\n    }\n catch (    ClassNotFoundException e1) {\n      logger.error(\"bean class error to create.\");\n      throw new ConfigurableException(e1.getMessage(),e1);\n    }\n    String analyzedIndexFields=context.getString(ANALYZEDINDEXFIELDS);\n    if (analyzedIndexFields != null && !analyzedIndexFields.isEmpty()) {\n      List<String> analyzedIndexFieldList=new ArrayList<String>(Arrays.asList(analyzedIndexFields.split(\",\")));\n      if (!pojoFields.containsAll(analyzedIndexFieldList)) {\n        logger.error(\"indexField\'s range beyong the range of pojoFields\");\n        throw new ConfigurableException(\"indexField\'s range beyong the range of pojoFields\");\n      }\n      analyzedIndexKeys.addAll(analyzedIndexFieldList);\n    }\n    String notAnalyzedIndexFields=context.getString(NOTANALYZEDINDEXFIELDS);\n    if (notAnalyzedIndexFields != null && !notAnalyzedIndexFields.isEmpty()) {\n      List<String> notAnalyzedIndexFieldList=new ArrayList<String>(Arrays.asList(notAnalyzedIndexFields.split(\",\")));\n      if (!pojoFields.containsAll(notAnalyzedIndexFieldList)) {\n        logger.error(\"notAnalyzedIndexFields\'s range beyong the range of pojoFields\");\n        throw new ConfigurableException(\"notAnalyzedIndexFields\'s range beyong the range of pojoFields\");\n      }\n      notAnalyzedIndexKeys.addAll(notAnalyzedIndexFieldList);\n    }\n    String storeFields=context.getString(STOREFIELDS);\n    if (storeFields != null && !storeFields.isEmpty()) {\n      List<String> storeFieldList=new ArrayList<String>(Arrays.asList(storeFields.split(\",\")));\n      if (!pojoFields.containsAll(storeFieldList) && !storeFieldList.contains(DATAFIELDNAME_DEFAULT)) {\n        logger.error(\"storeFields\'s range beyong the range of pojoFields\");\n        throw new ConfigurableException(\"storeFields\'s range beyong the range of pojoFields\");\n      }\n      storeKeys.addAll(storeFieldList);\n    }\n    if (storeKeys.contains(DATAFIELDNAME_DEFAULT)) {\n      hasDataKey=true;\n    }\n    String indexFilePath=context.getString(INDEXFILEPATH);\n    if (indexFilePath == null || indexFilePath.isEmpty()) {\n      logger.error(\"indexFilePath must to be set.\");\n      throw new ConfigurableException(\"indexFilePath must to be set.\");\n    }\n    try {\n      this.directory=FSDirectory.open(new File(indexFilePath));\n    }\n catch (    IOException e) {\n      logger.error(\"index file dir error to create.\");\n      throw new ConfigurableException(\"index file dir error to create.\");\n    }\n  }\n catch (  InstantiationException e2) {\n    Log.error(this.getClass(),e2.getMessage());\n    throw new ConfigurableException(e2.getMessage(),e2);\n  }\ncatch (  IllegalAccessException e2) {\n    Log.error(this.getClass(),e2.getMessage());\n    throw new ConfigurableException(e2.getMessage(),e2);\n  }\ncatch (  ClassNotFoundException e2) {\n    Log.error(this.getClass(),e2.getMessage());\n    throw new ConfigurableException(e2.getMessage(),e2);\n  }\n}\n');
INSERT INTO `methodinfo` VALUES ('MyLuence-master', 'getPojoFileds', NULL, 'com.wind.myLuence.search.BeanSearcher', 'void', 'private;', NULL, '0', '/** \n * ??????????\n * @param fields\n * @param clazz\n */\nprivate void getPojoFileds(List<String> fields,Class<?> clazz){\n  Method[] methods=clazz.getDeclaredMethods();\n  for (  Method m : methods) {\n    String name=m.getName();\n    if (name.startsWith(\"get\")) {\n      String returnValueType=m.getReturnType().getSimpleName();\n      if (\"String\".equals(returnValueType) || \"Integer\".equals(returnValueType) || \"Long\".equals(returnValueType)|| \"Double\".equals(returnValueType)|| \"Float\".equals(returnValueType)|| \"Boolean\".equals(returnValueType)|| \"Short\".equalsIgnoreCase(returnValueType)|| \"Date\".equals(returnValueType)|| \"Timestamp\".equals(returnValueType)|| \"HashMap\".equals(returnValueType)|| \"ArrayList\".equals(returnValueType)) {\n        name=name.substring(3,4).toLowerCase() + name.substring(4);\n      }\n else {\n        getPojoFileds(fields,m.getReturnType());\n      }\n      fields.add(name);\n    }\n  }\n}\n');
INSERT INTO `methodinfo` VALUES ('MyLuence-master', 'setFieldValue', NULL, 'com.wind.myLuence.search.BeanSearcher', 'void', 'private;', NULL, '0', 'private void setFieldValue(Class<?> clazz,String fieldName,String fieldvalue,String fieldType,Object data) throws Exception {\n  Object relValue=null;\n  if (\"String\".equals(fieldType)) {\n    relValue=fieldvalue;\n  }\n else   if (\"Integer\".equals(fieldType)) {\n    relValue=Integer.parseInt(fieldvalue);\n  }\n else   if (\"Long\".equals(fieldType)) {\n    relValue=Long.parseLong(fieldvalue);\n  }\n else   if (\"Double\".equals(fieldType)) {\n    relValue=Double.parseDouble(fieldvalue);\n  }\n else   if (\"Float\".equals(fieldType)) {\n    relValue=Float.parseFloat(fieldvalue);\n  }\n else   if (\"Boolean\".equals(fieldType)) {\n    relValue=Boolean.parseBoolean(fieldvalue);\n  }\n else   if (\"Short\".equalsIgnoreCase(fieldType)) {\n    relValue=Short.parseShort(fieldvalue);\n  }\n else   if (\"Date\".equals(fieldType)) {\n    relValue=DateUtil.parseTime(fieldvalue);\n  }\n else   if (\"Timestamp\".equals(fieldvalue)) {\n    relValue=DateUtil.parseTime(fieldvalue);\n  }\n else   if (\"HashMap\".equals(fieldvalue)) {\n    relValue=JSONObject.toBean(JSONObject.fromObject(fieldvalue),HashMap.class);\n  }\n else   if (\"ArrayList\".equals(fieldvalue)) {\n    relValue=JSONArray.toArray(JSONArray.fromObject(fieldvalue));\n  }\n  Method m=clazz.getMethod(\"set\" + fieldName.substring(0,1).toUpperCase() + fieldName.substring(1));\n  m.invoke(data,relValue);\n}\n');
INSERT INTO `methodinfo` VALUES ('MyLuence-master', 'getFieldNameType', NULL, 'com.wind.myLuence.search.BeanSearcher', 'Map<String,String>', 'private;', NULL, '0', 'private Map<String,String> getFieldNameType(Class<?> clazz){\n  Map<String,String> fieldNameTypeMap=new HashMap<String,String>();\n  Method[] methods=clazz.getDeclaredMethods();\n  for (  Method m : methods) {\n    String name=m.getName();\n    if (name.startsWith(\"set\")) {\n      String returnValueType=m.getReturnType().getSimpleName();\n      name=name.substring(3,4).toLowerCase() + name.substring(4);\n      fieldNameTypeMap.put(name,returnValueType);\n    }\n  }\n  return fieldNameTypeMap;\n}\n');
INSERT INTO `methodinfo` VALUES ('MyLuence-master', 'configure', NULL, 'com.wind.myLuence.source.BeanSource', 'void', 'public;', NULL, '0', 'public void configure(Context context) throws ConfigurableException {\n}\n');
INSERT INTO `methodinfo` VALUES ('MyLuence-master', 'open', NULL, 'com.wind.myLuence.source.BeanSource', 'void', 'public;', NULL, '0', 'public void open(Index index){\n}\n');
INSERT INTO `methodinfo` VALUES ('MyLuence-master', 'InitialDataOpen', NULL, 'com.wind.myLuence.source.BeanSource', 'void', '@Override;public;', NULL, '0', '@Override public void InitialDataOpen(){\n}\n');
INSERT INTO `methodinfo` VALUES ('MyLuence-master', 'IncreaseDataOpen', NULL, 'com.wind.myLuence.source.BeanSource', 'void', '@Override;public;', NULL, '0', '@Override public void IncreaseDataOpen(){\n}\n');
INSERT INTO `methodinfo` VALUES ('MyLuence-master', 'configure', NULL, 'com.wind.myLuence.source.DDALDatabaseSource', 'void', 'public;', NULL, '0', 'public void configure(Context context) throws ConfigurableException, ClassNotFoundException {\n  String classPath=context.getString(CfFileParser.ConfigItem.BEANCLASS.value);\n  pojoClass=Class.forName(classPath);\n  String incField=context.getString(CfFileParser.ConfigItem.INCFIELD.value);\n  if (incField != null) {\n    String indexPath=context.getString(CfFileParser.ConfigItem.INDEXFILEPATH.value);\n    String incFieldPath=indexPath + \"/inc/fieldLast.txt\";\n    incFieldRW=new IncFieldRW(incField,new File(incFieldPath),pojoClass);\n  }\n  String dataFilterStr=context.getString(CfFileParser.ConfigItem.DATAFILTER.value);\n  if (dataFilterStr != null) {\n    String[] dataFilterArray=dataFilterStr.split(\":\");\n    fieldFilterMap.put(dataFilterArray[0],dataFilterArray[1]);\n  }\n  index.configure(context);\n}\n');
INSERT INTO `methodinfo` VALUES ('MyLuence-master', 'InitialDataOpen', NULL, 'com.wind.myLuence.source.DDALDatabaseSource', 'void', '@Override;public;', NULL, '0', '@Override public void InitialDataOpen(){\n  DataOrder order=null;\n  if (incFieldRW != null) {\n    order=new DataOrder(incFieldRW.incFieldName,true);\n  }\n  List<Condition> filter=new ArrayList<Condition>();\n  if (!fieldFilterMap.isEmpty()) {\n    for (    String field : fieldFilterMap.keySet()) {\n      filter.add(new Condition(field,fieldFilterMap.get(field)));\n    }\n  }\n  asynHelper.query(pojoClass,null,Integer.MAX_VALUE,(filter.isEmpty() ? null : filter),order,new ResListCallback<Object>(){\n    @Override public void succeed(    List<Object> datas) throws Exception {\n      if (datas != null && !datas.isEmpty() && incFieldRW != null) {\n        incFieldRW.writeValue(datas.get(0));\n      }\n      BeanIndex databaseIndex=(BeanIndex)index;\n      databaseIndex.write(datas);\n    }\n    @Override public void failure(    ResultVO result) throws Exception {\n      logger.error(result.getErrorMsg());\n    }\n  }\n);\n}\n');
INSERT INTO `methodinfo` VALUES ('MyLuence-master', 'IncreaseDataOpen', NULL, 'com.wind.myLuence.source.DDALDatabaseSource', 'void', '@Override;public;', NULL, '0', '@Override public void IncreaseDataOpen(){\n  if (incFieldRW == null) {\n    throw new NullPointerException(\"increase field doesn\'t set\");\n  }\n  try {\n    List<Condition> filter=new ArrayList<Condition>();\n    filter.add(new Condition(incFieldRW.incFieldName,Compares.MORE_THAN,incFieldRW.readValue()));\n    if (!fieldFilterMap.isEmpty()) {\n      for (      String field : fieldFilterMap.keySet()) {\n        filter.add(new Condition(field,fieldFilterMap.get(field)));\n      }\n    }\n    DataOrder order=new DataOrder(incFieldRW.incFieldName,true);\n    asynHelper.query(pojoClass,null,filter,order,null,new ResListCallback<Object>(){\n      @Override public void succeed(      List<Object> datas) throws Exception {\n        if (datas != null && !datas.isEmpty()) {\n          incFieldRW.writeValue(datas.get(0));\n        }\n        BeanIndex databaseIndex=(BeanIndex)index;\n        databaseIndex.append(datas);\n      }\n      @Override public void failure(      ResultVO result) throws Exception {\n        logger.error(result.getErrorMsg());\n      }\n    }\n);\n  }\n catch (  Exception e) {\n    logger.error(e.getMessage(),e);\n  }\n}\n');
INSERT INTO `methodinfo` VALUES ('MyLuence-master', 'getAsynHelper', NULL, 'com.wind.myLuence.source.DDALDatabaseSource', 'AsynDDALHelper', 'public;', NULL, '0', 'public AsynDDALHelper getAsynHelper(){\n  return asynHelper;\n}\n');
INSERT INTO `methodinfo` VALUES ('MyLuence-master', 'setAsynHelper', NULL, 'com.wind.myLuence.source.DDALDatabaseSource', 'void', 'public;', NULL, '0', 'public void setAsynHelper(AsynDDALHelper asynHelper){\n  this.asynHelper=asynHelper;\n}\n');
INSERT INTO `methodinfo` VALUES ('MyLuence-master', 'IncFieldRW', NULL, 'com.wind.myLuence.source.IncFieldRW', '', '', NULL, '1', 'IncFieldRW(String incFieldName,File incFieldLastStore,Class<?> clazz){\n  this.incFieldName=incFieldName;\n  this.incFieldLastStore=incFieldLastStore;\n  this.clazz=clazz;\n}\n');
INSERT INTO `methodinfo` VALUES ('MyLuence-master', 'writeValue', NULL, 'com.wind.myLuence.source.IncFieldRW', 'void', 'protected;', NULL, '0', '/** \n * ???????\n * @param clazz\n * @param fieldName\n * @param data\n * @throws Exception\n */\nprotected void writeValue(Object data) throws Exception {\n  String value=null;\n  Method m=clazz.getMethod(\"get\" + incFieldName.substring(0,1).toUpperCase() + incFieldName.substring(1));\n  String returnValueType=m.getReturnType().getSimpleName();\n  Object mValue=m.invoke(data);\n  if (mValue != null) {\n    if (\"Integer\".equals(returnValueType) || \"Long\".equals(returnValueType) || \"Short\".equalsIgnoreCase(returnValueType)) {\n      value=mValue.toString();\n    }\n else     if (\"Date\".equals(returnValueType)) {\n      value=TimeFormat.format((Date)mValue);\n    }\n else     if (\"Timestamp\".equals(returnValueType)) {\n      value=TimeFormat.format((Timestamp)mValue);\n    }\n  }\n  Map<String,String> map=new HashMap<String,String>();\n  map.put(incFieldName,value);\n  map.put(FIELDTYPE,returnValueType);\n  JSONObjUtil.saveJson2File(new JSONObject(map),incFieldLastStore);\n}\n');
INSERT INTO `methodinfo` VALUES ('MyLuence-master', 'readValue', NULL, 'com.wind.myLuence.source.IncFieldRW', 'Object', 'protected;', NULL, '0', '/** \n * ???????\n * @return\n * @throws Exception\n */\nprotected Object readValue() throws Exception {\n  Object result=null;\n  if (incFieldLastStore.exists()) {\n    String content=JSONObjUtil.getFileJSONContent(incFieldLastStore);\n    JSONObject jsonObeject=new JSONObject(content);\n    String value=jsonObeject.getString(incFieldName);\n    String fieldType=jsonObeject.getString(FIELDTYPE);\n    if (\"Integer\".equals(fieldType)) {\n      result=Integer.parseInt(value);\n    }\n else     if (\"Long\".equals(fieldType)) {\n      result=Long.parseLong(value);\n    }\n else     if (\"Short\".equals(fieldType)) {\n      result=Short.parseShort(value);\n    }\n else     if (\"Date\".equals(fieldType)) {\n      result=TimeFormat.parse(value);\n    }\n else     if (\"Timestamp\".equals(fieldType)) {\n      result=TimeFormat.parse(value);\n    }\n  }\n  return result;\n}\n');
INSERT INTO `methodinfo` VALUES ('MyLuence-master', 'DateJsonValueProcessor', NULL, 'com.wind.myLuence.source.DateJsonValueProcessor', '', 'public;', NULL, '1', 'public DateJsonValueProcessor(String format){\n  this.format=format;\n}\n');
INSERT INTO `methodinfo` VALUES ('MyLuence-master', 'processArrayValue', NULL, 'com.wind.myLuence.source.DateJsonValueProcessor', 'Object', '@Override;public;', NULL, '0', '@Override public Object processArrayValue(Object arg0,JsonConfig arg1){\n  return processObjectValue(null,arg0,arg1);\n}\n');
INSERT INTO `methodinfo` VALUES ('MyLuence-master', 'processObjectValue', NULL, 'com.wind.myLuence.source.DateJsonValueProcessor', 'Object', '@Override;public;', NULL, '0', '@Override public Object processObjectValue(String key,Object value,JsonConfig arg2){\n  if (value == null) {\n    return \"\";\n  }\n  if (value instanceof java.sql.Timestamp) {\n    String str=new SimpleDateFormat(format).format((java.sql.Timestamp)value);\n    return str;\n  }\n  if (value instanceof java.util.Date) {\n    String str=new SimpleDateFormat(format).format((java.util.Date)value);\n    return str;\n  }\n  return value.toString();\n}\n');
INSERT INTO `methodinfo` VALUES ('MyLuence-master', 'getIndex', NULL, 'com.wind.myLuence.source.IndexSource', 'Index', 'public;', NULL, '0', 'public Index getIndex(){\n  return index;\n}\n');
INSERT INTO `methodinfo` VALUES ('MyLuence-master', 'setIndex', NULL, 'com.wind.myLuence.source.IndexSource', 'void', 'public;', NULL, '0', 'public void setIndex(Index index){\n  this.index=index;\n}\n');
INSERT INTO `methodinfo` VALUES ('MyLuence-master', 'getFieldNameType', NULL, 'com.wind.myLuence.util.ClassUtil', 'Map<String,String>', 'public;static;', NULL, '0', 'public static Map<String,String> getFieldNameType(Class<?> clazz){\n  Map<String,String> fieldNameTypeMap=new HashMap<String,String>();\n  if (clazz != null) {\n    Field[] fields=clazz.getDeclaredFields();\n    for (int j=0; j < fields.length; j++) {\n      String fieldName=fields[j].getName();\n      String classPath=fields[j].getType().getName();\n      fieldNameTypeMap.put(fieldName,classPath);\n    }\n  }\n  return fieldNameTypeMap;\n}\n');
INSERT INTO `methodinfo` VALUES ('MyLuence-master', 'main', NULL, 'com.wind.myLuence.util.ClassUtil', 'void', 'public;static;', NULL, '0', 'public static void main(String[] args) throws ClassNotFoundException {\n  Map<String,String> fields=getFieldNameType(Class.forName(\"com.snail.cloudlevel.app.assistant.res.YdlCrawlStrategy\"));\n  for (  String field : fields.keySet()) {\n    System.out.println(field + \"  :\" + fields.get(field));\n  }\n}\n');
INSERT INTO `methodinfo` VALUES ('MyLuence-master', 'parseTime', NULL, 'com.wind.Paint_MyLuence.util.DateUtil', 'Date', 'public;synchronized;static;', NULL, '0', '/** \n * ????yyyy-mm-dd HH:mm:ss????????????\n * @param date\n * @return\n * @throws ParseException\n */\npublic synchronized static Date parseTime(String date) throws ParseException {\n  if (date == null || date.isEmpty())   return null;\n  Date d=null;\n  return TimeFormat.parse(date);\n}\n');
INSERT INTO `methodinfo` VALUES ('MyLuence-master', 'timeFormat', NULL, 'com.wind.Paint_MyLuence.util.DateUtil', 'String', 'public;synchronized;static;', NULL, '0', '/** \n * ????????yyyy-mm-dd HH:mm:ss?????????\n * @param date\n * @return\n */\npublic synchronized static String timeFormat(Date date){\n  if (date == null)   return null;\n  return TimeFormat.format(date);\n}\n');

-- ----------------------------
-- Table structure for methodinvocationinfo
-- ----------------------------
DROP TABLE IF EXISTS `methodinvocationinfo`;
CREATE TABLE `methodinvocationinfo`  (
  `projectName` text CHARACTER SET utf8 COLLATE utf8_general_ci NULL,
  `invocateVariant` text CHARACTER SET utf8 COLLATE utf8_general_ci NULL,
  `callMethodName` text CHARACTER SET utf8 COLLATE utf8_general_ci NULL,
  `calledMethodName` text CHARACTER SET utf8 COLLATE utf8_general_ci NULL
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of methodinvocationinfo
-- ----------------------------
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'prop', 'parse', 'load');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'PropertyParser.class', 'parse', 'getResourceAsStream');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'this', 'parse', 'getFilePath');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'prop', 'parse', 'keys');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'keys', 'parse', 'hasMoreElements');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'keys', 'parse', 'nextElement');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'key', 'parse', 'contains');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'cfItemArray', 'parse', 'add');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'key', 'parse', 'split');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'prop', 'parse', 'get');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'configs', 'parse', 'put');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'configs', 'parse', 'keySet');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'key', 'parse', 'contains');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'context', 'parse', 'put');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'key', 'parse', 'split');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'configs', 'parse', 'get');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'results', 'parse', 'put');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'Collections', 'Context', 'synchronizedMap');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'this', 'Context', 'putAll');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'parameters', 'clear', 'clear');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'parameters', 'putAll', 'putAll');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'parameters', 'put', 'put');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'Boolean', 'getBoolean', 'parseBoolean');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'value', 'getBoolean', 'trim');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'Integer', 'getInteger', 'parseInt');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'value', 'getInteger', 'trim');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'parameters', 'get', 'get');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'Long', 'getLong', 'parseLong');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'value', 'getLong', 'trim');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'name', 'getIxSourceInstance', 'isEmpty');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'beanFactory', 'getIxSourceInstance', 'getBean');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'beanFactory', 'getIxSourceInstance', 'getBean');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'beanFactory', 'getSearcherInstance', 'getBean');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'context', 'configure', 'getString');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'Class.forName(analyzerClass)', 'configure', 'newInstance');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'Class', 'configure', 'forName');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'context', 'configure', 'getString');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'Class', 'configure', 'forName');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'logger', 'configure', 'error');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'e1', 'configure', 'getMessage');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'context', 'configure', 'getString');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'analyzedIndexFields', 'configure', 'isEmpty');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'Arrays', 'configure', 'asList');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'analyzedIndexFields', 'configure', 'split');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'pojoFields', 'configure', 'containsAll');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'logger', 'configure', 'error');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'context', 'configure', 'getString');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'notAnalyzedIndexFields', 'configure', 'isEmpty');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'Arrays', 'configure', 'asList');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'notAnalyzedIndexFields', 'configure', 'split');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'pojoFields', 'configure', 'containsAll');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'logger', 'configure', 'error');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'context', 'configure', 'getString');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'storeFields', 'configure', 'isEmpty');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'Arrays', 'configure', 'asList');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'storeFields', 'configure', 'split');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'pojoFields', 'configure', 'containsAll');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'this.storeFields', 'configure', 'contains');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'logger', 'configure', 'error');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'logger', 'configure', 'error');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'context', 'configure', 'getString');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'pkFields', 'configure', 'isEmpty');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'Arrays', 'configure', 'asList');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'pkFields', 'configure', 'split');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'context', 'configure', 'getString');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'indexFilePath', 'configure', 'isEmpty');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'logger', 'configure', 'error');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'FSDirectory', 'configure', 'open');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'logger', 'configure', 'error');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'context', 'configure', 'getString');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'context', 'configure', 'getString');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'Log', 'configure', 'error');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'this', 'configure', 'getClass');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'e2', 'configure', 'getMessage');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'e2', 'configure', 'getMessage');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'Log', 'configure', 'error');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'this', 'configure', 'getClass');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'e2', 'configure', 'getMessage');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'e2', 'configure', 'getMessage');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'Log', 'configure', 'error');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'this', 'configure', 'getClass');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'e2', 'configure', 'getMessage');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'e2', 'configure', 'getMessage');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'Log', 'write', 'info');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'System', 'write', 'currentTimeMillis');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'datas', 'write', 'isEmpty');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'IndexWriter', 'write', 'isLocked');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'indexWriter', 'write', 'deleteAll');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'indexWriter', 'write', 'forceMergeDeletes');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'indexWriter', 'write', 'commit');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'pkFieldValueList', 'write', 'add');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'id', 'write', 'append');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'fieldType', 'write', 'setStored');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'fieldType', 'write', 'setIndexed');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'fieldType', 'write', 'setTokenized');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'doc', 'write', 'add');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'id', 'write', 'substring');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'id', 'write', 'length');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'fieldPropertyMap', 'write', 'keySet');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'fieldName', 'write', 'equalsIgnoreCase');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'JSONObject.fromObject(data,config)', 'write', 'toString');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'JSONObject', 'write', 'fromObject');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'fieldPropertyMap', 'write', 'get');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'fieldType', 'write', 'setStored');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'fieldLucproperty', 'write', 'isStore');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'fieldType', 'write', 'setIndexed');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'fieldLucproperty', 'write', 'isIndex');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'fieldType', 'write', 'setTokenized');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'fieldLucproperty', 'write', 'isAnalyzed');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'doc', 'write', 'add');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'indexWriter', 'write', 'addDocument');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'indexWriter', 'write', 'commit');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'Log', 'write', 'error');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'e', 'write', 'getMessage');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'indexWriter', 'write', 'close');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'IndexWriter', 'write', 'unlock');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'Log', 'write', 'error');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'this', 'write', 'getClass');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'Log', 'write', 'warn');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'System', 'write', 'currentTimeMillis');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'Log', 'append', 'info');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'datas', 'append', 'isEmpty');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'System', 'append', 'currentTimeMillis');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'IndexWriter', 'append', 'isLocked');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'pkFieldValueList', 'append', 'add');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'id', 'append', 'append');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'fieldType', 'append', 'setStored');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'fieldType', 'append', 'setIndexed');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'fieldType', 'append', 'setTokenized');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'doc', 'append', 'add');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'id', 'append', 'substring');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'id', 'append', 'length');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'fieldPropertyMap', 'append', 'keySet');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'fieldName', 'append', 'equalsIgnoreCase');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'JSONObject.fromObject(data,config)', 'append', 'toString');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'JSONObject', 'append', 'fromObject');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'fieldPropertyMap', 'append', 'get');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'fieldType', 'append', 'setStored');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'fieldLucproperty', 'append', 'isStore');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'fieldType', 'append', 'setIndexed');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'fieldLucproperty', 'append', 'isIndex');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'fieldType', 'append', 'setTokenized');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'fieldLucproperty', 'append', 'isAnalyzed');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'doc', 'append', 'add');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'indexWriter', 'append', 'addDocument');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'indexWriter', 'append', 'forceMerge');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'indexWriter', 'append', 'commit');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'Log', 'append', 'error');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'e', 'append', 'getMessage');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'indexWriter', 'append', 'close');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'IndexWriter', 'append', 'unlock');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'Log', 'append', 'error');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'this', 'append', 'getClass');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'Log', 'append', 'warn');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'System', 'append', 'currentTimeMillis');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'clazz', 'getFieldValue', 'getMethod');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'fieldName.substring(0,1)', 'getFieldValue', 'toUpperCase');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'fieldName', 'getFieldValue', 'substring');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'fieldName', 'getFieldValue', 'substring');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'm.getReturnType()', 'getFieldValue', 'getSimpleName');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'm', 'getFieldValue', 'getReturnType');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'm', 'getFieldValue', 'invoke');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', '\"String\"', 'getFieldValue', 'equals');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', '\"Integer\"', 'getFieldValue', 'equals');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', '\"Long\"', 'getFieldValue', 'equals');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', '\"Double\"', 'getFieldValue', 'equals');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', '\"Float\"', 'getFieldValue', 'equals');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', '\"Boolean\"', 'getFieldValue', 'equals');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', '\"Short\"', 'getFieldValue', 'equalsIgnoreCase');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'mValue', 'getFieldValue', 'toString');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', '\"Date\"', 'getFieldValue', 'equals');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'DateUtil', 'getFieldValue', 'timeFormat');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', '\"Timestamp\"', 'getFieldValue', 'equals');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'DateUtil', 'getFieldValue', 'timeFormat');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', '\"HashMap\"', 'getFieldValue', 'equals');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'JSONObject.fromObject(mValue,config)', 'getFieldValue', 'toString');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'JSONObject', 'getFieldValue', 'fromObject');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', '\"ArrayList\"', 'getFieldValue', 'equals');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'JSONArray.fromObject(mValue,config)', 'getFieldValue', 'toString');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'JSONArray', 'getFieldValue', 'fromObject');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'm', 'getFieldValue', 'getReturnType');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'clazz', 'getPojoFileds', 'getDeclaredMethods');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'm', 'getPojoFileds', 'getName');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'name', 'getPojoFileds', 'startsWith');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'm.getReturnType()', 'getPojoFileds', 'getSimpleName');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'm', 'getPojoFileds', 'getReturnType');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', '\"String\"', 'getPojoFileds', 'equals');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', '\"Integer\"', 'getPojoFileds', 'equals');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', '\"Long\"', 'getPojoFileds', 'equals');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', '\"Double\"', 'getPojoFileds', 'equals');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', '\"Float\"', 'getPojoFileds', 'equals');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', '\"Boolean\"', 'getPojoFileds', 'equals');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', '\"Short\"', 'getPojoFileds', 'equalsIgnoreCase');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', '\"Date\"', 'getPojoFileds', 'equals');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', '\"Timestamp\"', 'getPojoFileds', 'equals');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', '\"HashMap\"', 'getPojoFileds', 'equals');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', '\"ArrayList\"', 'getPojoFileds', 'equals');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'name.substring(3,4)', 'getPojoFileds', 'toLowerCase');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'name', 'getPojoFileds', 'substring');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'name', 'getPojoFileds', 'substring');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'm', 'getPojoFileds', 'getReturnType');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'fields', 'getPojoFileds', 'add');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'fieldLucproperty', 'getFieldLucProperty', 'setFieldName');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'fieldLucproperty', 'getFieldLucProperty', 'setAnalyzed');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'fieldLucproperty', 'getFieldLucProperty', 'setStore');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'fieldLucproperty', 'getFieldLucProperty', 'setIndex');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'fieldPropertyMap', 'getFieldLucProperty', 'put');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'fieldLucproperty', 'getFieldLucProperty', 'setFieldName');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'fieldLucproperty', 'getFieldLucProperty', 'setIndex');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'fieldLucproperty', 'getFieldLucProperty', 'setAnalyzed');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'fieldLucproperty', 'getFieldLucProperty', 'setStore');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'fieldPropertyMap', 'getFieldLucProperty', 'put');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'fieldPropertyMap', 'getFieldLucProperty', 'containsKey');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'fieldPropertyMap', 'getFieldLucProperty', 'get');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'fieldLucproperty', 'getFieldLucProperty', 'setStore');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'fieldLucproperty', 'getFieldLucProperty', 'setFieldName');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'fieldLucproperty', 'getFieldLucProperty', 'setIndex');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'fieldLucproperty', 'getFieldLucProperty', 'setAnalyzed');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'fieldLucproperty', 'getFieldLucProperty', 'setStore');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'fieldPropertyMap', 'getFieldLucProperty', 'put');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'new SimpleDateFormat(format)', 'processObjectValue', 'format');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'new SimpleDateFormat(format)', 'processObjectValue', 'format');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'value', 'processObjectValue', 'toString');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'configPath', 'init', 'contains');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'configPath', 'init', 'contains');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'cfFileParser', 'init', 'setFilePath');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'cfFileParser', 'init', 'parse');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'itemList', 'init', 'addAll');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'cfContextMap', 'init', 'keySet');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'cfContextMap', 'init', 'keySet');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'cfContextMap', 'init', 'get');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'factory', 'init', 'getIxSourceInstance');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'context', 'init', 'getString');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'indexSource', 'init', 'configure');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'indexSourceMap', 'init', 'put');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'factory', 'init', 'getSearcherInstance');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'searcher', 'init', 'configure');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'searcherMap', 'init', 'put');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'indexSourceMap', 'writeIndex', 'keySet');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'indexSourceMap.get(iSourceKey)', 'writeIndex', 'InitialDataOpen');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'indexSourceMap', 'writeIndex', 'get');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'itemList', 'writeIndex', 'contains');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'indexSourceMap.get(item)', 'writeIndex', 'InitialDataOpen');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'indexSourceMap', 'writeIndex', 'get');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'indexSourceMap', 'appendIndex', 'keySet');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'indexSourceMap.get(iSourceKey)', 'appendIndex', 'IncreaseDataOpen');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'indexSourceMap', 'appendIndex', 'get');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'itemList', 'appendIndex', 'contains');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'indexSourceMap.get(item)', 'appendIndex', 'IncreaseDataOpen');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'indexSourceMap', 'appendIndex', 'get');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'itemList', 'search', 'contains');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'searcherMap.get(item)', 'search', 'search');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'searcherMap', 'search', 'get');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'itemList', 'search', 'contains');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'searcherMap.get(item)', 'search', 'search');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'searcherMap', 'search', 'get');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'itemList', 'search', 'contains');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'searcherMap.get(item)', 'search', 'search');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'searcherMap', 'search', 'get');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'itemList', 'Exactsearch', 'contains');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'searcherMap.get(item)', 'Exactsearch', 'Exactsearch');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'searcherMap', 'Exactsearch', 'get');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'itemList', 'search', 'contains');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'searcherMap.get(item)', 'search', 'search');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'searcherMap', 'search', 'get');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'prop', 'parse', 'load');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'PropertyParser.class', 'parse', 'getResourceAsStream');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'prop', 'parse', 'keys');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'keys', 'parse', 'hasMoreElements');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'keys', 'parse', 'nextElement');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'prop', 'parse', 'get');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'configs', 'parse', 'put');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'PropertyParser', 'main', 'parse');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'map', 'main', 'keySet');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'System.out', 'main', 'println');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'map', 'main', 'get');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'e', 'main', 'printStackTrace');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'DirectoryReader', 'search', 'open');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'analyzedIndexKeys', 'search', 'toArray');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'parser', 'search', 'parse');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'searcher', 'search', 'search');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'searcher', 'search', 'doc');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'doc', 'search', 'get');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'JSONObject', 'search', 'toBean');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'JSONObject', 'search', 'fromObject');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'results', 'search', 'add');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'clazz', 'search', 'newInstance');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'doc', 'search', 'get');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'fieldNameTypes', 'search', 'get');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'results', 'search', 'add');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'logger', 'search', 'error');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'e', 'search', 'getMessage');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'logger', 'search', 'error');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'e', 'search', 'getMessage');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'logger', 'search', 'error');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'e', 'search', 'getMessage');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'DirectoryReader', 'search', 'open');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'analyzedIndexKeys', 'search', 'toArray');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'parser', 'search', 'parse');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'searcher', 'search', 'search');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'searcher', 'search', 'doc');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'doc', 'search', 'get');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'JSONObject', 'search', 'toBean');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'JSONObject', 'search', 'fromObject');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'results', 'search', 'add');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'clazz', 'search', 'newInstance');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'doc', 'search', 'get');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'fieldNameTypes', 'search', 'get');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'results', 'search', 'add');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'logger', 'search', 'error');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'e', 'search', 'getMessage');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'logger', 'search', 'error');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'e', 'search', 'getMessage');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'logger', 'search', 'error');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'e', 'search', 'getMessage');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'DirectoryReader', 'search', 'open');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'analyzedIndexKeys', 'search', 'toArray');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'parser', 'search', 'parse');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'searcher', 'search', 'search');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'Math', 'search', 'min');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'searcher', 'search', 'doc');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'doc', 'search', 'get');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'JSONObject', 'search', 'toBean');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'JSONObject', 'search', 'fromObject');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'results', 'search', 'add');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'clazz', 'search', 'newInstance');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'doc', 'search', 'get');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'fieldNameTypes', 'search', 'get');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'results', 'search', 'add');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'logger', 'search', 'error');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'e', 'search', 'getMessage');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'logger', 'search', 'error');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'e', 'search', 'getMessage');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'logger', 'search', 'error');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'e', 'search', 'getMessage');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'DirectoryReader', 'search', 'open');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'analyzedIndexKeys', 'search', 'toArray');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'parser', 'search', 'parse');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'Bquery', 'search', 'add');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'searcher', 'search', 'search');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'Math', 'search', 'min');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'searcher', 'search', 'doc');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'doc', 'search', 'get');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'JSONObject', 'search', 'toBean');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'JSONObject', 'search', 'fromObject');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'results', 'search', 'add');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'clazz', 'search', 'newInstance');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'doc', 'search', 'get');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'fieldNameTypes', 'search', 'get');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'results', 'search', 'add');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'logger', 'search', 'error');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'e', 'search', 'getMessage');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'logger', 'search', 'error');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'e', 'search', 'getMessage');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'notAnalyzedIndexKeys', 'Exactsearch', 'containsAll');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'searchTermMap', 'Exactsearch', 'keySet');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'DirectoryReader', 'Exactsearch', 'open');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'searchTermMap', 'Exactsearch', 'keySet');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'searchTermMap', 'Exactsearch', 'get');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'searcher', 'Exactsearch', 'search');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'searcher', 'Exactsearch', 'doc');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'doc', 'Exactsearch', 'get');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'JSONObject', 'Exactsearch', 'toBean');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'JSONObject', 'Exactsearch', 'fromObject');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'results', 'Exactsearch', 'add');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'clazz', 'Exactsearch', 'newInstance');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'doc', 'Exactsearch', 'get');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'fieldNameTypes', 'Exactsearch', 'get');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'results', 'Exactsearch', 'add');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'logger', 'Exactsearch', 'error');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'e', 'Exactsearch', 'getMessage');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'logger', 'Exactsearch', 'error');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'e', 'Exactsearch', 'getMessage');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'context', 'configure', 'getString');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'Class.forName(analyzerClass)', 'configure', 'newInstance');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'Class', 'configure', 'forName');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'context', 'configure', 'getString');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'Class', 'configure', 'forName');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'logger', 'configure', 'error');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'e1', 'configure', 'getMessage');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'context', 'configure', 'getString');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'analyzedIndexFields', 'configure', 'isEmpty');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'Arrays', 'configure', 'asList');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'analyzedIndexFields', 'configure', 'split');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'pojoFields', 'configure', 'containsAll');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'logger', 'configure', 'error');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'analyzedIndexKeys', 'configure', 'addAll');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'context', 'configure', 'getString');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'notAnalyzedIndexFields', 'configure', 'isEmpty');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'Arrays', 'configure', 'asList');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'notAnalyzedIndexFields', 'configure', 'split');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'pojoFields', 'configure', 'containsAll');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'logger', 'configure', 'error');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'notAnalyzedIndexKeys', 'configure', 'addAll');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'context', 'configure', 'getString');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'storeFields', 'configure', 'isEmpty');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'Arrays', 'configure', 'asList');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'storeFields', 'configure', 'split');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'pojoFields', 'configure', 'containsAll');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'storeFieldList', 'configure', 'contains');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'logger', 'configure', 'error');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'storeKeys', 'configure', 'addAll');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'storeKeys', 'configure', 'contains');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'context', 'configure', 'getString');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'indexFilePath', 'configure', 'isEmpty');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'logger', 'configure', 'error');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'FSDirectory', 'configure', 'open');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'logger', 'configure', 'error');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'Log', 'configure', 'error');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'this', 'configure', 'getClass');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'e2', 'configure', 'getMessage');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'e2', 'configure', 'getMessage');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'Log', 'configure', 'error');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'this', 'configure', 'getClass');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'e2', 'configure', 'getMessage');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'e2', 'configure', 'getMessage');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'Log', 'configure', 'error');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'this', 'configure', 'getClass');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'e2', 'configure', 'getMessage');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'e2', 'configure', 'getMessage');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'clazz', 'getPojoFileds', 'getDeclaredMethods');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'm', 'getPojoFileds', 'getName');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'name', 'getPojoFileds', 'startsWith');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'm.getReturnType()', 'getPojoFileds', 'getSimpleName');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'm', 'getPojoFileds', 'getReturnType');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', '\"String\"', 'getPojoFileds', 'equals');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', '\"Integer\"', 'getPojoFileds', 'equals');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', '\"Long\"', 'getPojoFileds', 'equals');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', '\"Double\"', 'getPojoFileds', 'equals');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', '\"Float\"', 'getPojoFileds', 'equals');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', '\"Boolean\"', 'getPojoFileds', 'equals');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', '\"Short\"', 'getPojoFileds', 'equalsIgnoreCase');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', '\"Date\"', 'getPojoFileds', 'equals');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', '\"Timestamp\"', 'getPojoFileds', 'equals');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', '\"HashMap\"', 'getPojoFileds', 'equals');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', '\"ArrayList\"', 'getPojoFileds', 'equals');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'name.substring(3,4)', 'getPojoFileds', 'toLowerCase');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'name', 'getPojoFileds', 'substring');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'name', 'getPojoFileds', 'substring');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'm', 'getPojoFileds', 'getReturnType');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'fields', 'getPojoFileds', 'add');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', '\"String\"', 'setFieldValue', 'equals');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', '\"Integer\"', 'setFieldValue', 'equals');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'Integer', 'setFieldValue', 'parseInt');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', '\"Long\"', 'setFieldValue', 'equals');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'Long', 'setFieldValue', 'parseLong');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', '\"Double\"', 'setFieldValue', 'equals');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'Double', 'setFieldValue', 'parseDouble');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', '\"Float\"', 'setFieldValue', 'equals');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'Float', 'setFieldValue', 'parseFloat');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', '\"Boolean\"', 'setFieldValue', 'equals');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'Boolean', 'setFieldValue', 'parseBoolean');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', '\"Short\"', 'setFieldValue', 'equalsIgnoreCase');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'Short', 'setFieldValue', 'parseShort');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', '\"Date\"', 'setFieldValue', 'equals');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'DateUtil', 'setFieldValue', 'parseTime');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', '\"Timestamp\"', 'setFieldValue', 'equals');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'DateUtil', 'setFieldValue', 'parseTime');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', '\"HashMap\"', 'setFieldValue', 'equals');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'JSONObject', 'setFieldValue', 'toBean');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'JSONObject', 'setFieldValue', 'fromObject');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', '\"ArrayList\"', 'setFieldValue', 'equals');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'JSONArray', 'setFieldValue', 'toArray');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'JSONArray', 'setFieldValue', 'fromObject');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'clazz', 'setFieldValue', 'getMethod');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'fieldName.substring(0,1)', 'setFieldValue', 'toUpperCase');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'fieldName', 'setFieldValue', 'substring');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'fieldName', 'setFieldValue', 'substring');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'm', 'setFieldValue', 'invoke');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'clazz', 'getFieldNameType', 'getDeclaredMethods');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'm', 'getFieldNameType', 'getName');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'name', 'getFieldNameType', 'startsWith');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'm.getReturnType()', 'getFieldNameType', 'getSimpleName');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'm', 'getFieldNameType', 'getReturnType');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'name.substring(3,4)', 'getFieldNameType', 'toLowerCase');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'name', 'getFieldNameType', 'substring');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'name', 'getFieldNameType', 'substring');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'fieldNameTypeMap', 'getFieldNameType', 'put');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'context', 'configure', 'getString');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'Class', 'configure', 'forName');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'context', 'configure', 'getString');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'context', 'configure', 'getString');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'context', 'configure', 'getString');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'dataFilterStr', 'configure', 'split');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'fieldFilterMap', 'configure', 'put');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'index', 'configure', 'configure');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'fieldFilterMap', 'InitialDataOpen', 'isEmpty');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'fieldFilterMap', 'InitialDataOpen', 'keySet');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'filter', 'InitialDataOpen', 'add');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'fieldFilterMap', 'InitialDataOpen', 'get');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'asynHelper', 'InitialDataOpen', 'query');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'filter', 'InitialDataOpen', 'isEmpty');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'datas', 'succeed', 'isEmpty');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'incFieldRW', 'succeed', 'writeValue');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'datas', 'succeed', 'get');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'databaseIndex', 'succeed', 'write');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'logger', 'failure', 'error');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'result', 'failure', 'getErrorMsg');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'filter', 'IncreaseDataOpen', 'add');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'incFieldRW', 'IncreaseDataOpen', 'readValue');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'fieldFilterMap', 'IncreaseDataOpen', 'isEmpty');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'fieldFilterMap', 'IncreaseDataOpen', 'keySet');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'filter', 'IncreaseDataOpen', 'add');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'fieldFilterMap', 'IncreaseDataOpen', 'get');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'asynHelper', 'IncreaseDataOpen', 'query');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'datas', 'succeed', 'isEmpty');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'incFieldRW', 'succeed', 'writeValue');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'datas', 'succeed', 'get');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'databaseIndex', 'succeed', 'append');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'logger', 'failure', 'error');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'result', 'failure', 'getErrorMsg');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'clazz', 'writeValue', 'getMethod');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'incFieldName.substring(0,1)', 'writeValue', 'toUpperCase');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'incFieldName', 'writeValue', 'substring');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'incFieldName', 'writeValue', 'substring');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'm.getReturnType()', 'writeValue', 'getSimpleName');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'm', 'writeValue', 'getReturnType');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'm', 'writeValue', 'invoke');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', '\"Integer\"', 'writeValue', 'equals');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', '\"Long\"', 'writeValue', 'equals');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', '\"Short\"', 'writeValue', 'equalsIgnoreCase');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'mValue', 'writeValue', 'toString');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', '\"Date\"', 'writeValue', 'equals');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'TimeFormat', 'writeValue', 'format');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', '\"Timestamp\"', 'writeValue', 'equals');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'TimeFormat', 'writeValue', 'format');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'map', 'writeValue', 'put');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'map', 'writeValue', 'put');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'JSONObjUtil', 'writeValue', 'saveJson2File');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'incFieldLastStore', 'readValue', 'exists');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'JSONObjUtil', 'readValue', 'getFileJSONContent');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'jsonObeject', 'readValue', 'getString');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'jsonObeject', 'readValue', 'getString');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', '\"Integer\"', 'readValue', 'equals');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'Integer', 'readValue', 'parseInt');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', '\"Long\"', 'readValue', 'equals');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'Long', 'readValue', 'parseLong');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', '\"Short\"', 'readValue', 'equals');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'Short', 'readValue', 'parseShort');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', '\"Date\"', 'readValue', 'equals');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'TimeFormat', 'readValue', 'parse');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', '\"Timestamp\"', 'readValue', 'equals');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'TimeFormat', 'readValue', 'parse');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'new SimpleDateFormat(format)', 'processObjectValue', 'format');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'new SimpleDateFormat(format)', 'processObjectValue', 'format');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'value', 'processObjectValue', 'toString');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'clazz', 'getFieldNameType', 'getDeclaredFields');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'fields[j]', 'getFieldNameType', 'getName');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'fields[j].getType()', 'getFieldNameType', 'getName');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'fields[j]', 'getFieldNameType', 'getType');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'fieldNameTypeMap', 'getFieldNameType', 'put');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'Class', 'main', 'forName');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'fields', 'main', 'keySet');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'System.out', 'main', 'println');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'fields', 'main', 'get');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'date', 'parseTime', 'isEmpty');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'TimeFormat', 'parseTime', 'parse');
INSERT INTO `methodinvocationinfo` VALUES ('MyLuence-master', 'TimeFormat', 'timeFormat', 'format');

-- ----------------------------
-- Table structure for tokeninmethod
-- ----------------------------
DROP TABLE IF EXISTS `tokeninmethod`;
CREATE TABLE `tokeninmethod`  (
  `projectName` text CHARACTER SET utf8 COLLATE utf8_general_ci NULL,
  `methodName` text CHARACTER SET utf8 COLLATE utf8_general_ci NULL,
  `tokens` text CHARACTER SET utf8 COLLATE utf8_general_ci NULL,
  `stem` text CHARACTER SET utf8 COLLATE utf8_general_ci NULL
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Table structure for variableinfo
-- ----------------------------
DROP TABLE IF EXISTS `variableinfo`;
CREATE TABLE `variableinfo`  (
  `projectName` text CHARACTER SET utf8 COLLATE utf8_general_ci NULL,
  `name` text CHARACTER SET utf8 COLLATE utf8_general_ci NULL,
  `datatype` text CHARACTER SET utf8 COLLATE utf8_general_ci NULL,
  `belongedMethod` text CHARACTER SET utf8 COLLATE utf8_general_ci NULL,
  `icount` text CHARACTER SET utf8 COLLATE utf8_general_ci NULL
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

SET FOREIGN_KEY_CHECKS = 1;
